{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AI Engineer Contract","text":"<p>Welcome. This site publishes the canonical AI Engineer Contract and companion how\u2011tos. Start with the contract, then browse the how\u2011tos for workflows and examples.</p> <ul> <li>\ud83d\udcdc Contract: Engineering Contract</li> <li>\ud83e\udded How\u2011tos: Phase Gates, Model Recommendations, Advise\u2011Only Templates</li> </ul>"},{"location":"release-trigger-2.0.1/","title":"Release trigger (2.0.1)","text":"<p>Trigger patch release 2.0.1 (no functional changes).</p>"},{"location":"release-trigger-2.0.2/","title":"Release trigger (2.0.2)","text":"<p>Trigger patch release 2.0.2 to align embedded version references.</p>"},{"location":"design/","title":"Design docs","text":"<p>Start with the Engineering Contract, then use these as working design artifacts for the repository.</p> <ul> <li>\ud83d\udcdc Engineering Contract</li> <li>\ud83d\uddfa\ufe0f Delivery Map</li> <li>\u2705 DECISIONS.md and detailed entries in <code>decisions/</code> and <code>decision-log/</code></li> </ul> <p>Optional stubs for future sections:</p> <ul> <li>\ud83e\udded requirements.md</li> <li>\ud83e\uddf1 architecture.md</li> <li>\ud83d\uddfa\ufe0f roadmap.md</li> </ul>"},{"location":"design/DECISIONS/","title":"Decisions Log","text":"Date ID Prompt Choice Rationale Linked Artifacts 2025-10-21 D2025-10-21-01 How do we simplify SCM-C into an advise-only workflow? Redefine SCM-C deliverables and escalation triggers, publish templates, and align agent guidance. Keeps chat-only sessions auditable, reduces zip/patch churn, and clarifies hand-offs per #91/#97 feedback. docs/design/ENGINEERING_CONTRACT.md, AGENTS.md, docs/kb/howtos/scm-c-advise.md, issue #91, issue #97 2025-10-20 D2025-10-20-01 How do we harden agent governance and documentation quality gates? Clarify agent guardrails, codify the feedback \u2192 proposal \u2192 design pipeline, mandate phase-gate/docs-quality workflows, and add model recommendation guidance. Addresses feedback in #90/#87 by setting auditable guardrails and ensuring planning artifacts reference approved model families. docs/design/ENGINEERING_CONTRACT.md, issue #90, issue #92, issue #87 2025-10-18 D2025-10-18-01 What work may agents perform before implementation begins? Adopt explicit planning vs. build guardrails with a PR checklist and Plan issues Resolves ambiguity noted in #42; aligns repo operations with contract-first discipline. docs/design/ENGINEERING_CONTRACT.md, issue #42 2025-10-18 D2025-10-18-02 How should agents elicit and track decisions during requirements? Introduce Decision Elicitation Protocol + required DECISIONS.md log with optional YAML Ensures auditable, automation-friendly decisions trail as requested in #43. docs/design/ENGINEERING_CONTRACT.md, templates/\u2026, issue #43 2025-10-18 D2025-10-18-03 What baseline content must AGENTS.md include across repositories? Mandate contract link, planning refs, plan/build gate, CI/labels, secrets, SCM mode section Standardizes operator onboarding and reduces misconfiguration risk per #44. docs/design/ENGINEERING_CONTRACT.md, AGENTS.md, issue #44 2025-10-18 D2025-10-18-04 How do we enforce the Quality Bar consistently? Define a linter spec + phased CI adoption (warn-only \u2192 blocking) Codifies expectations from #46 and keeps documentation quality measurable. docs/design/ENGINEERING_CONTRACT.md, docs/kb/howtos/quality-bar-linter.md, issue #46 2025-10-18 D2025-10-18-05 How should SCM modes be detected and constrained? Publish decision tree + allowed ops matrix; confirm before privileged actions Removes ambiguity noted in #47 and prevents unintended repo/secret changes. docs/design/ENGINEERING_CONTRACT.md, docs/kb/howtos/scm-mode-decision-tree.md, issue #47 2025-10-18 D2025-10-18-06 What rights attestation details must IP disclaimers include? Add template covering quotation terms, page spans, asset inventory, policy contact Delivers #49\u2019s request for consistent IP compliance signals. docs/kb/howtos/ip-disclaimer.md, issue #49 2025-10-18 D2025-10-18-07 How do we communicate canonical vs instance assets to consumers? Publish dual-role mapping + annotate instance workflows Clarifies expectations from #55 and guides downstream adopters. docs/kb/dual-role.md, README.md, issue #55 2025-10-18 D2025-10-18-08 How should tool templates determine owner/repo defaults? Auto-detect via git/manifest with CLI overrides + updated docs Improves portability per #57 and supports forks without template edits. tools/*.py templates, README.md, issue #57"},{"location":"design/ENGINEERING_CONTRACT/","title":"ENGINEERING_CONTRACT.md (AI \u00d7 Peter) \u2014 v2.3.0","text":"<p>Breaking change: <code>&lt;BASE_BRANCH&gt;</code> is removed. The development branch is always <code>develop</code>.</p>"},{"location":"design/ENGINEERING_CONTRACT/#1-branches-flow","title":"1) Branches &amp; Flow","text":"<ul> <li>Work under <code>pvliesdonk/{repo_name}</code>.</li> <li><code>main</code> = releases only (cut from <code>develop \u2192 main</code> when requested).</li> <li>Development branch: <code>develop</code> (no alternates).</li> <li>Feature branches: <code>feat/&lt;slug&gt;</code>, <code>fix/&lt;slug&gt;</code>, <code>docs/&lt;slug&gt;</code>, <code>chore/&lt;slug&gt;</code>, <code>refactor/&lt;slug&gt;</code>, <code>test/&lt;slug&gt;</code>.</li> <li>Always rebase on <code>origin/develop</code> before PR. Squash-merge PRs into <code>develop</code>.</li> </ul>"},{"location":"design/ENGINEERING_CONTRACT/#1a-policy-knobs","title":"1a) Policy Knobs","text":"<p>This repository publishes its governance knobs in <code>ai/manifest.json</code> under the <code>policy</code> key. Tooling must read this configuration rather than re-encoding defaults.</p> <ul> <li><code>base_branch</code> \u2013 authoritative development branch (currently <code>develop</code>).</li> <li><code>contract_version</code> \u2013 published contract version for downstream consumers.</li> <li><code>docs</code> \u2013 roots for distributable documentation (<code>docs/</code>, <code>docs/design</code>, <code>docs/kb</code>).</li> <li><code>releases</code> \u2013 automation and back-merge expectations (release-please, merge back to <code>develop</code>).</li> <li><code>phase_gate</code> \u2013 declarative enforcement:</li> <li><code>override_labels.plan_exempt</code> / <code>.deviation</code> (defaults: <code>plan-exempt</code>, <code>deviation-approved</code>).</li> <li><code>allowed_by_phase</code> overrides per phase (requirements/design/plan/build).</li> <li><code>require_plan_ref_in_build</code> toggles whether build-phase PRs must link to a Plan issue.</li> </ul> <p>Automation (phase gate, contract-lint, CLI) must respect these values and expose helpful errors when they are missing.</p>"},{"location":"design/ENGINEERING_CONTRACT/#2-pr-quality","title":"2) PR Quality","text":"<ul> <li>Title: Conventional Commit (<code>feat:</code>, <code>fix:</code>, <code>docs:</code>, <code>chore:</code>, <code>refactor:</code>, <code>ci:</code>, <code>test:</code>). Add <code>!</code> for breaking changes.</li> <li>Body: Summary, Why, Changes, Validation, Risk &amp; Rollback, Notes.</li> <li>Small focused diffs; update docs/tests with behavior changes.</li> </ul>"},{"location":"design/ENGINEERING_CONTRACT/#3-releases-automation-tool-agnostic","title":"3) Releases &amp; Automation (Tool-Agnostic)","text":"<ul> <li>Use a Release Automation Tool (RAT) (e.g., release-please, semantic-release) to produce SemVer tags, release notes, and (optionally) <code>CHANGELOG.md</code>.</li> <li>Prefer a Release PR over direct bot commits on <code>main</code>.</li> <li>After release on <code>main</code>, back-merge <code>main \u2192 develop</code> so development carries release artifacts (changelog/version).</li> </ul>"},{"location":"design/ENGINEERING_CONTRACT/#4-session-capability-modes-scm","title":"4) Session Capability Modes (SCM)","text":"<ul> <li>SCM-A \u2014 Full-Stack Agent: direct access to code, <code>git</code>, <code>gh</code>, runtimes, and tokens. Do everything automatically (branches, commits, PRs, labels, issues, projects). Merge into <code>develop</code> after explicit chat approval. Releases on <code>main</code> are always manual (human presses the button). Allowed ops include pushing branches, running CI, creating repos/projects, and editing secrets (with approval).</li> <li>SCM-B \u2014 IDE Co-Driver: can edit files but cannot push. Provide ready-to-run scripts/patches and precise commands. Track readiness and tell the human when to merge or open release PRs. Allowed ops: local edits, diff generation, command suggestions, documentation updates. Disallowed: pushing, creating repos, mutating secrets.</li> <li>SCM-C \u2014 Advise-Only Operator: chat-only environment. Deliver structured guidance only\u2014issue/PR bodies, review comments, checklists, and optional inline unified diffs for a single file. Use the templates in <code>docs/kb/howtos/scm-c-advise.md</code> so every hand-off stays copy/paste friendly.</li> <li>Deliverables: Issue/plan/PR bodies, review summaries, validation or risk checklists, and single-file inline unified diffs wrapped in fenced code blocks with application notes.</li> <li>Forbidden: Filesystem edits, git commands, running scripts, archive/patch uploads, or automated PR/branch creation.</li> <li>Escalate: When the requested change spans multiple files, requires command execution or automation, or the human asks for direct code edits beyond the documented inline diff scope.</li> <li>Detect mode once per session following this flow:</li> <li>Auto-detect capabilities (check git push access, filesystem access, <code>gh</code> auth). If unclear, ask the human to confirm the mode.</li> <li>Confirm before performing privileged actions (creating repos, changing default branches, toggling visibility).</li> <li>Log any mode switch in the conversation and in the PR body if it impacts work.</li> <li>Use the decision tree in <code>docs/kb/howtos/scm-mode-decision-tree.md</code> before running operations that require elevated access (e.g., <code>gh repo create</code>, secret updates).</li> </ul>"},{"location":"design/ENGINEERING_CONTRACT/#scm-deliverables-escalation","title":"SCM deliverables &amp; escalation","text":"Mode Primary outputs Escalate when\u2026 SCM-A Branches, commits, PRs, CI runs, repo/label automation Human approval required for privileged ops (secrets, repos). SCM-B Local edits, diffs/patches, scripts, documentation updates Work needs direct pushes, multi-repo automation, or secrets. SCM-C Advise-only packages via docs/kb/howtos/scm-c-advise.md templates (issues, reviews, checklists, inline diffs) Task requires multi-file edits, command execution, automation, or non-templated assets."},{"location":"design/ENGINEERING_CONTRACT/#agent-operating-guardrails","title":"Agent Operating Guardrails","text":"<ul> <li>Always restate the detected SCM mode and base branch (<code>develop</code>) before taking privileged actions. If the environment changes mid-session, pause and re-confirm with a human.</li> <li>Operate behind a referenced Plan issue (unless <code>plan-exempt</code> is explicitly granted) and branch from <code>origin/develop</code> using the contract naming scheme. Document the plan with acceptance criteria and validation before editing docs/config/code.</li> <li>Apply the required PR labels: <code>from-ai</code>, <code>needs-review</code>, and an appropriate scope label (<code>docs</code>, <code>chore</code>, etc.). Auto-create missing labels with <code>gh label create</code>.</li> <li>Post a \u201cProposed solution\u201d comment on the tracked issue before implementation. Keep it up to date as work evolves and link to the eventual PR.</li> <li>Enforce secrets hygiene: never store or echo tokens, redact sensitive output, and request escalated permissions only when unavoidable. Decline work that would expose secrets or violate org policy.</li> <li>If instructions conflict, would bypass <code>phase.yaml</code>, or exceed the current CI/approval guardrails, escalate via a <code>feedback</code> issue instead of proceeding. Document any deviations with <code>deviation-approved</code> and explicit rollback steps.</li> </ul>"},{"location":"design/ENGINEERING_CONTRACT/#5-artifact-delivery","title":"5) Artifact Delivery","text":"<ul> <li>Default: Provide deliverables as downloadable files. Long scripts can be hidden in chat but must be downloadable.</li> <li>Advice-only: When explicitly asked for advice, give guidance/snippets/commands without packaging deliverables (scoped to the current request).</li> </ul>"},{"location":"design/ENGINEERING_CONTRACT/#6-robust-delimiters-escaping","title":"6) Robust Delimiters &amp; Escaping","text":"<ul> <li>Use raw triple-quoted strings, LF line endings, single-quoted heredocs (<code>&lt;&lt;'EOF'</code>), and base64 for fragile/binary payloads. Optional SHA-256 verification.</li> </ul>"},{"location":"design/ENGINEERING_CONTRACT/#7-security","title":"7) Security","text":"<ul> <li>No secrets in repos or logs. Use <code>.env.example</code>; ignore real secrets via <code>.gitignore</code>. Redact in logs/PRs.</li> </ul>"},{"location":"design/ENGINEERING_CONTRACT/#8-communication","title":"8) Communication","text":"<ul> <li>Concise progress logs; deterministic scripts; pin versions where sensible.</li> </ul>"},{"location":"design/ENGINEERING_CONTRACT/#issue-hygiene-proposal-tracking","title":"Issue Hygiene &amp; Proposal Tracking","text":"<ul> <li>Always open issues for next steps and discrete work items; link related design/KB sections.</li> <li>When picking up an issue, add a top comment titled \u201cProposed solution\u201d that summarizes:</li> <li>Scope and approach, validation/acceptance criteria, risks/rollback, and labels.</li> <li>Any contract/process implications (e.g., phase vs harness alignment) and planned CI checks.</li> <li>Keep the comment updated if the approach changes; link the PR and reference the comment in the PR body.</li> <li>Use labels from the taxonomy (e.g., <code>from-ai</code>, <code>needs-review</code>, <code>docs</code>, <code>chore</code>).</li> <li>Follow the feedback pipeline:</li> <li><code>feedback</code> issues capture raw input and MAY close without action.</li> <li>Elevate accepted ideas into <code>feature proposal</code> issues to explore scope and validation.</li> <li>Promote vetted proposals into <code>design change</code> issues when design docs are ready to update. Cross-link each hop so history stays auditable.</li> </ul>"},{"location":"design/ENGINEERING_CONTRACT/#feedback-questions","title":"Feedback &amp; Questions","text":"<ul> <li>AIs and consumers SHOULD open issues on the canonical repository for ambiguities, questions, or improvement proposals.</li> <li>Use labels: <code>feedback</code> and <code>question</code> (and others as appropriate).</li> <li>Include concrete references (file path + heading) and a minimal reproduction or example PR where helpful.</li> </ul>"},{"location":"design/ENGINEERING_CONTRACT/#9-programming-adjacent-projects-docskbasewiki","title":"9) Programming-Adjacent Projects (Docs/KBase/Wiki)","text":"<ul> <li>The same PR/review flow applies. Validation adapts (link checkers, Markdownlint, doc build if any).</li> <li>Docs live under <code>docs/</code>. For knowledge bases, prefer <code>docs/kb/</code> with an <code>index.md</code> (front matter + TOC).</li> <li>Design docs (requirements/architecture/ADRs) live under <code>docs/design/</code>.</li> <li>Versioning separation: Releases use SemVer; design/kb docs use date+revision (<code>doc_version: YYYY-MM-DD.rN</code> in YAML front matter).</li> <li>Issues/PRs must link to the relevant doc sections; the AI may create issues/labels/milestones/projects.</li> </ul>"},{"location":"design/ENGINEERING_CONTRACT/#10-new-repo-bootstrap","title":"10) New Repo Bootstrap","text":"<ul> <li>Confirm LICENSE (usually MIT). Create <code>LICENSE</code>, <code>README.md</code>, <code>CONTRIBUTING.md</code>, minimal <code>.gitignore</code>. Create/push <code>main</code> and <code>develop</code>. Ensure default labels exist.</li> <li>Set up minimal CI immediately (e.g., markdown lint, script byte-compile, basic format/type checks) so the very first commits are validated.</li> <li>AI selects CI tools based on the stack being introduced. At minimum include lint/format checks and a smoke run where applicable.</li> </ul>"},{"location":"design/ENGINEERING_CONTRACT/#11-canonical-source-distribution","title":"11) Canonical Source &amp; Distribution","text":"<ul> <li>Canonical repo: <code>pvliesdonk/ai_engineer_contract</code>. Keep the contract in consumer projects at <code>docs/design/ENGINEERING_CONTRACT.md</code> with a link back here.</li> <li>Include the latest contract and (optionally) <code>tools/</code> in new repos. You may sync updates via PR.</li> <li>Include a root <code>AGENTS.md</code> that summarizes how AI agents should operate in the repo (see section 24).</li> <li>Dual role note: This repository both hosts the generic, tool-agnostic contract and implements it for itself. Consumers should follow the contract text; workflows here (e.g., release-please) are examples, not mandates.</li> </ul>"},{"location":"design/ENGINEERING_CONTRACT/#12-labels","title":"12) Labels","text":"<ul> <li>Commits/PRs should have labels. Agents SHALL auto-create missing labels at PR time.</li> <li>Scripts SHOULD create missing labels via <code>gh label create</code> (idempotent) and MAY add repo-specific labels like <code>ci</code>, <code>feedback</code>.</li> <li>Suggested labels: <code>from-ai</code>, <code>needs-review</code>, <code>docs</code>, <code>chore</code>, <code>security</code>, <code>blocked</code>, <code>planning</code>, <code>needs-design-ref</code>, <code>breaking-change</code>, <code>content</code>, <code>design</code>, <code>asset</code>, <code>deviation-approved</code>, <code>feedback</code>.</li> </ul> <p>Example (idempotent) label creation</p> <pre><code>gh label create from-ai --color 5319e7 --description \"Auto-created label - from-ai\" --force\ngh label create needs-review --color d93f0b --description \"Auto-created label - needs-review\" --force\ngh label create ci --color 5319e7 --description \"Auto-created label - ci\" --force\ngh label create feedback --color 1d76db --description \"Feedback and questions\" --force\n</code></pre>"},{"location":"design/ENGINEERING_CONTRACT/#13-auto-upgrade-in-chat-repos","title":"13) Auto-Upgrade in Chat &amp; Repos","text":"<ul> <li>When a newer contract/tool appears in the current chat, immediately use it.</li> <li>Open a PR to update <code>ENGINEERING_CONTRACT.md</code> and replace only canonical <code>tools/canonical/*</code> if you\u2019re using them; keep <code>tools/local/*</code> intact.</li> </ul>"},{"location":"design/ENGINEERING_CONTRACT/#14-todos-not-implemented-stubs","title":"14) TODOs &amp; Not-Implemented Stubs","text":"<ul> <li>Stubbed code must include explicit TODO markers and fail fast (language-appropriate <code>NotImplemented</code>/exceptions or warnings). Place TODOs at call sites and function bodies.</li> </ul>"},{"location":"design/ENGINEERING_CONTRACT/#15-conventional-commit-proposals","title":"15) Conventional Commit Proposals","text":"<ul> <li>After every deliverable, propose 1\u20133 candidate Conventional Commit messages and a PR title.</li> </ul>"},{"location":"design/ENGINEERING_CONTRACT/#16-changelog-release-notes","title":"16) Changelog &amp; Release Notes","text":"<ul> <li>The RAT is the source of truth for release notes and <code>CHANGELOG.md</code> (if enabled). Don\u2019t edit generated changelog entries by hand. If no RAT, PRs must update <code>CHANGELOG.md</code>.</li> <li>Documentation as a core deliverable (SemVer semantics): when documentation is part of the shipped product (e.g., this contract), use Conventional Commits to drive SemVer:</li> <li>Breaking normative change: <code>docs(contract)!: \u2026</code> and include a <code>BREAKING CHANGE:</code> footer; release = MAJOR.</li> <li>New normative capability/allowance: <code>feat(contract): \u2026</code>; release = MINOR.</li> <li>Clarification or non-normative bug fix: <code>fix(contract): \u2026</code>; release = PATCH.</li> <li>Editorial/formatting only: <code>docs(contract): \u2026</code> (may not trigger a release). If you need a tag, add a <code>Release-As: x.y.z</code> footer.</li> <li>Note: Some release tools hide <code>docs:</code> by default and do not bump versions for it. Prefer <code>feat:</code>/<code>fix:</code> when the change is normative and should bump.</li> </ul>"},{"location":"design/ENGINEERING_CONTRACT/#17-deviation-protocol","title":"17) Deviation Protocol","text":"<ul> <li>Request permission to deviate: include reason, scope/impact, alternatives, rollback. Approval by Peter or a CODEOWNER. Label <code>deviation-approved</code>; document in the PR and changelog if user-visible.</li> </ul>"},{"location":"design/ENGINEERING_CONTRACT/#18-requirements-design-phase","title":"18) Requirements &amp; Design Phase","text":"<ul> <li>Before building, perform requirements + design and commit docs to <code>docs/design/</code>:</li> <li><code>requirements.md</code>, <code>architecture.md</code>, <code>decision-log/ADR-YYYYMMDD-&lt;slug&gt;.md</code></li> <li>Optional: <code>test-plan.md</code>, <code>roadmap.md</code>, diagrams (commit sources).</li> <li>Update docs with each PR that changes behavior/scope.</li> <li>Never eagerly start programming. Complete requirements and design first and get explicit go-ahead before implementation.</li> </ul>"},{"location":"design/ENGINEERING_CONTRACT/#pre-build-allowed-work","title":"Pre-Build Allowed Work","text":"<ul> <li>Allowed: Documentation authoring (requirements, architecture, roadmap, KB), repository administration (labels, milestones, Projects), issue triage, decision logging, and contract-aligned planning artifacts.</li> <li>Disallowed: Creating/modifying source code, tests, generated assets, or build/CI scripts; setting up scaffolding that belongs in the implementation phase; introducing binaries or vendored content.</li> <li>Pro tip: Anything that changes runtime behavior belongs behind a tracked Plan issue before editing code/tests/config/docs.</li> <li>Before leaving the planning phase, open or update a Plan issue (<code>.github/ISSUE_TEMPLATE/plan.yml</code>) that captures acceptance criteria and validation. Reference that issue in subsequent PRs (<code>Fixes #ID</code>). Use the <code>plan-exempt</code> label only for maintainer-approved micro-fixes and document the rationale.</li> <li>Add this checklist to any PR that lands before implementation work begins (all boxes must be \u2705):</li> </ul> <pre><code>- [ ] Only docs/planning/ops work (no code/tests/assets)\n- [ ] Plan issue (#ID) drafted/updated with acceptance criteria &amp; validation\n- [ ] Linked requirements/design docs updated\n- [ ] Decisions captured in docs/design/DECISIONS.md (and YAML if used)\n</code></pre>"},{"location":"design/ENGINEERING_CONTRACT/#decision-elicitation-protocol-logging","title":"Decision Elicitation Protocol &amp; Logging","text":"<ul> <li>Ask one decision at a time, presenting 1\u20133 options and clearly marking the recommended default.</li> <li>Confirm the choice, rationale, and owner, then log the outcome in <code>docs/design/DECISIONS.md</code>.</li> <li>Optionally create machine-readable entries in <code>docs/design/decisions/*.yaml</code> mirroring the log table.</li> <li>Reference decision IDs from issues/PRs and keep the log in sync with design updates and approvals.</li> </ul>"},{"location":"design/ENGINEERING_CONTRACT/#model-recommendations-in-plans","title":"Model Recommendations in Plans","text":"<ul> <li>Planning artifacts MAY recommend model families for AI-assisted work. Prefer the organization\u2019s approved model catalog and reference the latest generally available versions.</li> <li>When no org policy exists, name the family (e.g., \u201cOpenAI GPT-5\u201d, \u201cOpenAI GPT-4.1\u201d) and provide a short rationale with acceptable fallbacks that cover cost, latency, and privacy constraints.</li> <li>Record recommendations in docs; pin exact SKUs only in deployable configuration files. Revisit the recommendations at each release or when upstream models change materially.</li> <li>Use the provider matrix and task routes published in <code>docs/kb/howtos/model-recommendations.md</code>. At minimum, capture the shared provider families so downstream repos stay aligned:</li> </ul> <pre><code>ai_assist:\n  providers:\n    openai:\n      primary: gpt-5\n      thinking: gpt-5-thinking\n      fast: o4-mini\n      long_context: gpt-4.1\n    google:\n      primary: gemini-2.5-flash\n      thinking: gemini-2.5-pro\n      fast: gemini-2.5-flash-lite\n      long_context: gemini-2.5-pro\n    ollama:\n      primary: llama3.1:8b-instruct-q4_K_M\n      thinking: deepseek-r1:7b\n      fast: mistral:7b-instruct\n      long_context: mistral:7b-instruct\n  notes: &gt;\n    Document families in planning; pin exact SKUs only in deployable config.\n    For local models on 8 GB GPUs, prefer Q4_K_M quantizations for stability.\n</code></pre> <ul> <li>Route guidance covers common tasks (<code>scm_c_advise</code>, <code>policy_edit</code>, <code>bulk_scaffold</code>, <code>long_context</code>, <code>bulk_narration</code>, <code>bulk_programming</code>) across OpenAI, Google AI Studio, and local Ollama options so maintainers can tailor usage per scenario.</li> </ul>"},{"location":"design/ENGINEERING_CONTRACT/#19-issue-project-management-ai-allowed","title":"19) Issue &amp; Project Management (AI allowed)","text":"<ul> <li>The AI may create issues/labels/milestones/projects. Design-impacting work must link to design docs, otherwise label <code>needs-design-ref</code> and add the doc before implementation.</li> <li>Link PRs to issues (<code>Fixes #123</code>). Avoid assigning people unless asked; prefer milestones/projects.</li> </ul>"},{"location":"design/ENGINEERING_CONTRACT/#20-planning-vs-releases","title":"20) Planning vs Releases","text":"<ul> <li>Plan by Milestones (<code>M1</code>, <code>M2</code>, \u2026) and optional Release Trains (<code>RYYYY.MM</code>, <code>RYYYYQn</code>), not by future SemVer.</li> <li>Record the actual shipped tags after release in <code>docs/design/delivery-map.yml</code>.</li> <li>Develop milestones on dedicated branches. Pull issues into the milestone branch via PRs. Avoid parallel work on potentially conflicting issues; if multiple issues converge on the same milestone, chain branches (base follow-up branches on the predecessor) to minimize conflict.</li> </ul>"},{"location":"design/ENGINEERING_CONTRACT/#21-branching-discipline","title":"21) Branching Discipline","text":"<ul> <li>All work happens on a topic branch off <code>origin/develop</code> (<code>feat/&lt;slug&gt;</code>, <code>fix/&lt;slug&gt;</code>, etc.).</li> <li>Keep many small commits. Squash-merge into <code>develop</code>.</li> <li>Keep branches rebased on <code>origin/develop</code>. Do not delete topic branches until the change is released and back-merged (<code>main</code> \u2192 <code>develop</code>).</li> <li>Prefer serializing changes that touch the same codepaths to reduce merge conflicts. When concurrency is required, coordinate base branches to create a linear chain.</li> </ul>"},{"location":"design/ENGINEERING_CONTRACT/#25-ci-tool-selection-guidance-ai","title":"25) CI Tool Selection Guidance (AI)","text":"<ul> <li>The AI chooses minimal CI appropriate to the stack introduced by the change. Examples (non-exhaustive):</li> <li>Python: ruff/flake8, black (or equivalent formatter) in check mode, <code>python -m py_compile tools/*.py</code>, and <code>pytest -q</code> smoke if tests exist.</li> <li>Node/TypeScript: eslint, prettier check, <code>tsc --noEmit</code> if TypeScript, and <code>npm test -s</code> smoke where present.</li> <li>Shell: shellcheck.</li> <li>Docs-only: markdownlint.</li> <li>Go: golangci-lint, <code>go test ./...</code>.</li> <li>Rust: <code>cargo fmt -- --check</code>, <code>cargo clippy -- -D warnings</code>, <code>cargo test</code>.</li> <li>Terraform: <code>terraform fmt -check</code>, <code>terraform validate</code> (with init).</li> <li>Dockerfiles: hadolint.</li> <li>Integrate CI as early as possible (bootstrap or first meaningful PR). Keep checks fast and additive over time.</li> </ul>"},{"location":"design/ENGINEERING_CONTRACT/#22-merge-readiness-suggestions","title":"22) Merge-Readiness Suggestions","text":"<ul> <li>PR \u2192 develop is ready when: branch rebased; CI green; design link (or <code>needs-design-ref</code> + follow-up); complete PR body; Conventional Commit title; no blocking labels; changelog handled (RAT/manual).</li> <li>Release PR (develop \u2192 main) is ready when: meaningful changes since last tag; CI green on <code>develop</code>; release notes ready (RAT/manual); back-merge plan exists; no open P0/P1 for the scope; manual approval in GitHub.</li> </ul>"},{"location":"design/ENGINEERING_CONTRACT/#23-human-machine-readability-self-contained","title":"23) Human + Machine Readability (Self-contained)","text":"<ul> <li>Markdown with YAML front matter. Commit diagram sources (Mermaid/PlantUML/Graphviz). Avoid proprietary-only formats; provide text exports if necessary.</li> <li>Provide/update <code>ai/manifest.json</code> so tools find contract, design root, roadmap, KB root, labels, and versioning schemes.</li> <li>Encode AI assistance defaults in the manifest. Mirror the provider families/routes from <code>docs/kb/howtos/model-recommendations.md</code> so automation can reason about tasks:</li> </ul> <pre><code>{\n  \"ai_assist\": {\n    \"providers\": {\n      \"openai\": { \"primary\": \"gpt-5\", \"thinking\": \"gpt-5-thinking\", \"fast\": \"o4-mini\", \"long_context\": \"gpt-4.1\" },\n      \"google\": { \"primary\": \"gemini-2.5-flash\", \"thinking\": \"gemini-2.5-pro\", \"fast\": \"gemini-2.5-flash-lite\", \"long_context\": \"gemini-2.5-pro\" },\n      \"ollama\": { \"primary\": \"llama3.1:8b-instruct-q4_K_M\", \"thinking\": \"deepseek-r1:7b\", \"fast\": \"mistral:7b-instruct\", \"long_context\": \"mistral:7b-instruct\" }\n    },\n    \"review_on_release\": true\n  }\n}\n</code></pre>"},{"location":"design/ENGINEERING_CONTRACT/#changelog","title":"Changelog","text":"<ul> <li>v2.3.0 \u2014 Add ai-contract CLI + smoke test workflow, codify SCM-C advise-only process, and remove legacy BASE_BRANCH references.</li> <li>v2.2.0 \u2014 Enforce Plan \u2192 Build gating, issue template, workflow guardrails, and release automation token check.</li> <li>v2.1.2 \u2014 Guard contract version references and document release checklist; align release manifest updates.</li> <li>v2.1.1 \u2014 Document quality bar expectations, decision logging, and issue hygiene; add feedback channel, PR linked-issue reminder, and SCM phase gate workflow.</li> <li>v2.0.2 \u2014 Clarify dual-role hosting vs instance; add AI CI tool selection guidance; add minimal contract capsule and binding prompt.</li> <li>v2.0.1 \u2014 Add pre-implementation discipline, milestone branch guidance, and early CI setup recommendation.</li> <li>v2.0.0 \u2014 Remove <code>&lt;BASE_BRANCH&gt;</code>; standardize on <code>develop</code>. Tighten wording, clarify KB/wiki usage, and update tools/checklists to match.</li> </ul>"},{"location":"design/ENGINEERING_CONTRACT/#24-agentsmd-convention","title":"24) AGENTS.md Convention","text":"<ul> <li>Add an <code>AGENTS.md</code> at the repository root to define agent behavior for this codebase.</li> <li>Scope and precedence:</li> <li>A root <code>AGENTS.md</code> applies to the entire repository tree.</li> <li>A nested <code>AGENTS.md</code> applies to its subtree and overrides rules from higher levels when in conflict.</li> <li>Direct instructions from a human (issue/PR/chat) take precedence over <code>AGENTS.md</code> files.</li> <li>Mandatory sections (use these headings verbatim):</li> <li><code>## Contract Link &amp; Scope</code></li> <li><code>## Planning Sources</code></li> <li><code>## Plan &amp; Build Gate</code></li> <li><code>## Branching, PRs &amp; Labels</code></li> <li><code>## CI &amp; Tooling</code></li> <li><code>## Security &amp; Secrets</code></li> <li><code>## Session Modes (SCM-A/B/C)</code></li> <li>Each section must describe: base branch (<code>develop</code>), PR/merge rules (squash into <code>develop</code>), Conventional Commit titles, release automation, documentation roots (<code>docs/design</code>, <code>docs/kb</code>), required labels, CI expectations, secrets handling, and how to escalate/confirm SCM modes.</li> <li>Keep <code>AGENTS.md</code> short, actionable, and consistent with this contract. Link to <code>docs/design/ENGINEERING_CONTRACT.md</code> for details.</li> <li>Provide the following snippet (update repository-specific details only):</li> </ul> <pre><code># AGENTS.md \u2014 AI Agent Instructions (repo-wide)\n\n## Contract Link &amp; Scope\n- Authoritative contract: [docs/design/ENGINEERING_CONTRACT.md](docs/design/ENGINEERING_CONTRACT.md)\n- Base branch: `develop`; PRs target `develop`; releases via release-please on `main`.\n\n## Planning Sources\n- Requirements/design live in `docs/design/`; knowledge base in `docs/kb/`.\n- Keep `docs/design/requirements.md`, `architecture.md`, `DECISIONS.md`, and ADRs current before coding.\n\n## Plan &amp; Build Gate\n- Build work requires a referenced Plan issue (`Fixes #ID` / `Refs #ID`) unless the PR carries `plan-exempt`.\n- Pre-build PRs follow the contract checklist; focus on docs/planning/ops only.\n- Update the Plan issue when scope or acceptance criteria change.\n\n## Branching, PRs &amp; Labels\n- Branch naming: `feat|fix|docs|chore|refactor|test/&lt;slug&gt;`.\n- Rebase on `origin/develop`; squash-merge after approval.\n- Apply `from-ai`, `needs-review`, plus scope labels (`docs`, `chore`, etc.) as appropriate.\n\n## CI &amp; Tooling\n- Run markdownlint for docs-only changes; follow contract guidance for additional stacks.\n- Keep `ai/manifest.json` and CI workflows in sync with repo capabilities. release-please runs automatically on `main`; use workflow dispatch for manual retries if needed.\n\n## Security &amp; Secrets\n- Never commit secrets; use `.env.example`.\n- Redact tokens in logs/PRs; coordinate with maintainers for secret rotation.\n\n## Session Modes (SCM-A/B/C)\n- Detect mode once per session; confirm capabilities with the human if unclear.\n- SCM-A may push/PR (merge only with approval); SCM-B offers instructions; SCM-C delivers advise-only packages using `docs/kb/howtos/scm-c-advise.md` (no archives or direct file edits).\n</code></pre>"},{"location":"design/ENGINEERING_CONTRACT/#26-ci-phase-gates","title":"26) CI Phase Gates","text":"<ul> <li>Enforce the repository phase using a root <code>phase.yaml</code> and CI path allowlists.</li> <li><code>phase: requirements|design|plan|build</code></li> <li>Optional <code>allowed_paths:</code> overrides default allowlists per phase.</li> <li>Defaults:</li> <li>requirements/design: <code>docs/**</code>, <code>AGENTS.md</code>, <code>ai/**</code>, <code>phase.yaml</code></li> <li>plan: above + <code>.github/**</code></li> <li>build: unrestricted</li> <li>Maintain <code>.github/workflows/phase-gate.yml</code> (or equivalent) so every PR runs the phase gate against <code>phase.yaml</code>. The workflow MUST fail fast when a change touches disallowed paths.</li> <li>Temporary deviation: add the <code>deviation-approved</code> label and include rationale and rollback in the PR body.</li> <li>Advancing the phase is an auditable one-file change: update <code>phase.yaml</code> in a separate PR.</li> </ul>"},{"location":"design/ENGINEERING_CONTRACT/#27-quality-bar-enforcement","title":"27) Quality Bar Enforcement","text":"<ul> <li>Maintain a Quality Bar linter that checks:</li> <li>Front matter title matches first H1.</li> <li>Required status fields are present.</li> <li>No placeholder-only sections remain (e.g., bare \u201cTODO\u201d headings).</li> <li>Document links resolve (use a link checker).</li> <li>Citations include identifiers and page spans when quoting physical sources.</li> <li>Adoption cadence:</li> <li>Wire the linter locally; run in <code>warn-only</code> mode in CI during requirements/design phases.</li> <li>Promote to blocking once the repository reaches <code>phase: build</code>.</li> <li>Run <code>.github/workflows/docs-quality.yml</code> (or equivalent) on docs-affecting PRs. Include at minimum <code>markdownlint-cli2</code> and a link checker such as <code>lychee</code> configured to fail on errors and surface actionable logs.</li> <li>Document the chosen implementation (Python/Node) and share remediation guidance in CI output.</li> <li>Reference: <code>docs/kb/howtos/quality-bar-linter.md</code>.</li> </ul>"},{"location":"design/ENGINEERING_CONTRACT/#28-ip-rights-attestation","title":"28) IP Rights &amp; Attestation","text":"<ul> <li>Every repository MUST include an <code>IP_DISCLAIMER.md</code> (or equivalent) with the rights attestation template from <code>docs/kb/howtos/ip-disclaimer.md</code>.</li> <li>Contributors must state whether extended quotations are allowed and under which licence/terms.</li> <li>Citations require source identifiers:</li> <li>Physical media: include page spans (e.g., \u201cpp. 12\u201315\u201d).</li> <li>Online sources: include permalink + retrieval date.</li> <li>Catalog third-party assets with licence metadata and attribution text.</li> <li>Escalate novel IP questions to the policy contact listed in the disclaimer before merging.</li> </ul>"},{"location":"design/ENGINEERING_CONTRACT/#29-dual-role-transparency","title":"29) Dual-Role Transparency","text":"<ul> <li>Distinguish canonical vs instance assets as described in <code>docs/kb/dual-role.md</code>.</li> <li>Annotate instance-only workflows and automation with header comments clarifying scope.</li> <li>Keep canonical templates (<code>tools/*_TEMPLATE.py</code>, design templates) free of repository-specific defaults; place instance-specific automation under <code>tools/local/</code> or equivalent.</li> <li>Update the README and knowledge base when new instance-specific workflows or scripts are introduced.</li> </ul>"},{"location":"design/architecture/","title":"Architecture","text":""},{"location":"design/architecture/#governance-artifacts-architecture","title":"Governance Artifacts Architecture","text":""},{"location":"design/architecture/#overview","title":"Overview","text":"<p>This iteration layers on operational governance (Quality Bar enforcement and SCM mode rules), dual-role documentation, IP rights guidance, and tooling portability improvements.</p>"},{"location":"design/architecture/#contract-updates","title":"Contract Updates","text":"<ul> <li>Append a Quality Bar Enforcement section describing the linter checks, adoption phases   (warn-only vs blocking), and CI expectations.</li> <li>Enhance the Session Capability Modes area with detection steps, confirmation prompts, and   allowed operations per mode, backed by a decision tree reference.</li> <li>Expand AGENTS.md Convention to mention the new dual-role guidance and references to the   Quality Bar/SCM sections.</li> <li>Reference the rights attestation template and dual-role doc in the appropriate contract sections.</li> </ul>"},{"location":"design/architecture/#documentation-templates","title":"Documentation &amp; Templates","text":"<ul> <li>Add <code>docs/kb/dual-role.md</code> mapping canonical vs instance assets, pointing to workflow annotations   and directory conventions.</li> <li>Introduce an IP disclaimer template snippet covering rights attestation via   <code>docs/kb/howtos/ip-disclaimer.md</code> and ship <code>templates/docs.kb.ip_disclaimer_template.md</code> for reuse.</li> <li>Update <code>ai/session-mode-handshake.md</code> with the detection/confirmation flow and link to the   decision tree.</li> <li>Extend README to surface the dual-role doc and mention the Quality Bar/SCM resources.</li> </ul>"},{"location":"design/architecture/#processes-tooling","title":"Processes &amp; Tooling","text":"<ul> <li>Document the Quality Bar linter spec in <code>docs/kb/howtos/quality-bar-linter.md</code> (new) and outline   how repositories should integrate or phase it in.</li> <li>Update GitHub workflow YAML headers to call out instance-only behavior for this repo.</li> <li>Modify tool templates to autodetect owner/repo using <code>ai/manifest.json</code> or Git remotes while   keeping CLI/env overrides; ensure docstrings and README guidance reflect the changes.</li> <li>Maintain decision logs for each change driver (issues #46, #47, #49, #55, #57).</li> </ul>"},{"location":"design/delivery-map/","title":"Delivery Map","text":"<p>This page is generated from <code>docs/design/delivery-map.yml</code>.</p>"},{"location":"design/delivery-map/#p0-hardening-batch","title":"P0 hardening batch","text":"<p>(milestone: next; tags: v2.2.1)</p> Document Summary Model Recommendations Model routes table and provider guidance Phase Gates Quick-Escape how-to"},{"location":"design/requirements/","title":"Requirements","text":""},{"location":"design/requirements/#governance-operator-guidance-p0","title":"Governance &amp; Operator Guidance (P0)","text":"<p>This iteration focuses on codifying the operator guardrails that repeatedly surfaced in issues #42, #43, and #44.</p>"},{"location":"design/requirements/#r1-pre-build-discipline","title":"R1 \u2014 Pre-Build Discipline","text":"<ul> <li>Define explicit categories of work that are allowed before a Plan issue unlocks implementation.</li> <li>List disallowed activities (e.g., creating code files, scaffolding tests) with illustrative examples.</li> <li>Add a lightweight PR checklist agents must include when submitting pre-build changes.</li> <li>Ensure guidance lives in <code>docs/design/ENGINEERING_CONTRACT.md</code> and references the checklist.</li> </ul>"},{"location":"design/requirements/#r2-decision-elicitation-protocol","title":"R2 \u2014 Decision Elicitation Protocol","text":"<ul> <li>Capture a canonical protocol for asking one-at-a-time questions with recommended defaults.</li> <li>Require repositories to maintain <code>docs/design/DECISIONS.md</code> that logs prompts, selected options,   rationale, and dates. Allow optional per-decision YAML files in <code>docs/design/decisions/</code>.</li> <li>Provide a reusable template (under <code>templates/</code>) for the decisions log.</li> <li>Cross-reference the protocol from the engineering contract and README/KB where applicable.</li> </ul>"},{"location":"design/requirements/#r3-agentsmd-baseline","title":"R3 \u2014 AGENTS.md Baseline","text":"<ul> <li>Elevate AGENTS.md content requirements into the engineering contract.</li> <li>Mandate sections covering contract link, planning docs, plan/build gate, labels/CI, secrets policy,   and session-mode handling.</li> <li>Supply a snippet/template agents can copy when authoring repository-specific instructions.</li> <li>Update this repository\u2019s root <code>AGENTS.md</code> to comply with the new baseline.</li> </ul>"},{"location":"design/requirements/#r4-quality-bar-enforcement-scm-guidance","title":"R4 \u2014 Quality Bar Enforcement &amp; SCM Guidance","text":"<ul> <li>Define a Quality Bar linter spec that checks heading alignment with YAML, status lines,   section completeness, link references, and citation presence.</li> <li>Document when the linter should run (warn-only vs mandatory) and how to integrate it into CI.</li> <li>Expand session capability mode (SCM) guidance with detection steps, confirmation prompts,   and a matrix of allowed operations per mode.</li> <li>Provide a decision tree for agents to follow before performing SCM-impacting tasks.</li> </ul>"},{"location":"design/requirements/#r5-ip-rights-dual-role-documentation","title":"R5 \u2014 IP Rights &amp; Dual-Role Documentation","text":"<ul> <li>Add a rights attestation template to the IP disclaimer guidance covering quotation allowances,   copyright terms, and required citation spans.</li> <li>Provide a reusable <code>templates/docs.kb.ip_disclaimer_template.md</code> file mirroring the guidance.</li> <li>Create <code>docs/kb/dual-role.md</code> differentiating canonical distribution assets from instance-only   workflows, templates, and scripts. Link to it from the README and relevant docs.</li> <li>Annotate instance-only GitHub workflows with header comments explaining their scope.</li> <li>Highlight directory conventions (e.g., <code>tools/*_TEMPLATE.py</code> canonical vs potential local-only   scripts living under <code>tools/local/</code>).</li> </ul>"},{"location":"design/requirements/#r6-tool-template-portability","title":"R6 \u2014 Tool Template Portability","text":"<ul> <li>Update <code>tools/sync_canonical_contract_and_tools_TEMPLATE.py</code>,   <code>tools/pr_from_diff_TEMPLATE.py</code>, and <code>tools/repo_bootstrap_TEMPLATE.py</code> to derive owner/repo   information from the repo manifest or Git remotes by default, while preserving CLI/env overrides.</li> <li>Ensure updated scripts document the overrides and pass <code>python -m py_compile</code>.</li> <li>Refresh README/tool docstrings to describe the new behavior.</li> </ul>"},{"location":"design/decision-log/ADR-2025-01-01-template/","title":"ADR Template","text":""},{"location":"design/decision-log/ADR-2025-01-01-template/#intent","title":"Intent","text":"<ul> <li>Example ADR template file living under <code>docs/design/decision-log/</code> to illustrate structure.</li> <li>Replace placeholders with real context/decision/consequences when creating an ADR.</li> </ul>"},{"location":"issues/2025-10-19-align-version-refs/","title":"Issue: Align version references with v2.1.1","text":""},{"location":"issues/2025-10-19-align-version-refs/#summary","title":"Summary","text":"<ul> <li>Tag <code>ai_engineer_contract-v2.1.1</code> exists, but docs still mention the old capsule <code>v2.0.2</code> and changelog tops out at <code>v2.1.0</code>.</li> <li>Readers and tooling following the documented version drift behind what the release actually ships.</li> </ul>"},{"location":"issues/2025-10-19-align-version-refs/#scope","title":"Scope","text":"<ul> <li>Update <code>CHANGELOG.md</code> so the latest entry reflects <code>v2.1.1</code> with a brief, correct summary.</li> <li>Bump hard-coded capsule/version references in:</li> <li><code>README.md</code></li> <li><code>ai/contract_capsule.md</code></li> <li><code>ai/manifest.json</code></li> <li><code>docs/design/ENGINEERING_CONTRACT.md</code></li> <li><code>docs/kb/howtos/sync-canonical.md</code></li> <li><code>CONTRACT_REFERENCE_TEMPLATE.md</code></li> <li>Check for any other lingering <code>v2.0.2</code> mentions and refresh them to <code>v2.1.1</code>.</li> </ul>"},{"location":"issues/2025-10-19-align-version-refs/#acceptance-criteria","title":"Acceptance Criteria","text":"<ul> <li>All public docs and helper scripts point at <code>v2.1.1</code>.</li> <li>CHANGELOG documents <code>v2.1.1</code> as the latest release.</li> <li>Release follow-ups (e.g., <code>release-trigger-*</code> docs) capture any automation or manual steps required.</li> </ul>"},{"location":"issues/2025-10-19-align-version-refs/#status","title":"Status","text":"<ul> <li>[x] Updated README, capsule, manifest, contract, and sync docs to <code>v2.1.1</code>.</li> <li>[x] Added <code>2.1.1</code> entry to <code>CHANGELOG.md</code>.</li> <li>[x] Confirmed release artifacts (<code>release-please</code> notes) match the refreshed texts.</li> </ul>"},{"location":"issues/2025-10-19-align-version-refs/#follow-up","title":"Follow-up","text":"<ul> <li>Coordinate with release automation so the next release automatically aligns these references (see companion prevention issue).</li> </ul>"},{"location":"issues/2025-10-19-version-drift-guard/","title":"Issue: Guard against version-reference drift","text":""},{"location":"issues/2025-10-19-version-drift-guard/#problem","title":"Problem","text":"<ul> <li>Each release bumps the contract/capsule version (now <code>v2.1.1</code>), but multiple docs embed the previous value.</li> <li>Manual updates are error-prone; the latest release shipped before those references were refreshed.</li> </ul>"},{"location":"issues/2025-10-19-version-drift-guard/#proposal","title":"Proposal","text":"<ul> <li>Pick a single source of truth (e.g., <code>ai/manifest.json::capsuleVersion</code>).</li> <li>Add a lightweight checker that asserts all known references (<code>README.md</code>, <code>docs/design/ENGINEERING_CONTRACT.md</code>, <code>ai/contract_capsule.md</code>, <code>CONTRACT_REFERENCE_TEMPLATE.md</code>, <code>docs/kb/howtos/sync-canonical.md</code>, CHANGELOG header, etc.) match that value.</li> <li>Run the checker in CI (and locally via <code>make test</code>/<code>nox</code>/<code>tox</code> equivalent) so releases fail fast when the versions drift.</li> </ul>"},{"location":"issues/2025-10-19-version-drift-guard/#acceptance-criteria","title":"Acceptance Criteria","text":"<ul> <li>CI fails when any tracked file contains a version that diverges from the canonical value.</li> <li>The checker is easy to run locally and documented for release managers.</li> <li>Release checklist references the checker so future bumps include it.</li> </ul>"},{"location":"issues/2025-10-19-version-drift-guard/#status","title":"Status","text":"<ul> <li>[x] Added <code>ai/check_version_refs.py</code> to validate references locally.</li> <li>[x] Wired the checker into the <code>python-scripts-smoke</code> workflow.</li> <li>[x] Documented the checklist in <code>docs/kb/howtos/release-checklist.md</code>.</li> </ul>"},{"location":"issues/2025-10-19-version-drift-guard/#notes","title":"Notes","text":"<ul> <li>Optionally expose the checker as <code>python ai/check_version_refs.py</code> or similar so it fits within the current allowed paths.</li> <li>Consider extending release automation to rewrite the files automatically, but the immediate goal is detection.</li> </ul>"},{"location":"kb/","title":"Knowledge Base Index","text":""},{"location":"kb/#intent","title":"Intent","text":"<ul> <li>This section is an example knowledge base structure that implements the contract\u2019s guidance.</li> <li>Some links may be placeholders; stub pages are provided to illustrate organization.</li> </ul>"},{"location":"kb/#knowledge-base","title":"Knowledge Base","text":"<p>Welcome! Start here. Organize topics with stable slugs and headings.</p>"},{"location":"kb/#sections","title":"Sections","text":"<ul> <li>Getting Started</li> <li>Architecture Deep Dives</li> <li>How-Tos</li> <li>Dual Role \u2013 Canonical vs Instance Assets</li> </ul> <p>Keep links relative; avoid link rot. Commit diagram sources (Mermaid/PlantUML/Graphviz). Use YAML front matter.</p>"},{"location":"kb/dual-role/","title":"Dual Role \u2013 Canonical vs Instance Assets","text":""},{"location":"kb/dual-role/#intent","title":"Intent","text":"<ul> <li>Explain how this repository simultaneously distributes the canonical Engineering Contract and hosts an instance customised for <code>pvliesdonk/ai_engineer_contract</code>.</li> <li>Help consumers identify which files can be copied verbatim and which are examples that should be adapted.</li> </ul>"},{"location":"kb/dual-role/#asset-map","title":"Asset Map","text":"Area Canonical (Copy As-Is) Instance (Example Only) Contract &amp; Capsule <code>docs/design/ENGINEERING_CONTRACT.md</code>, <code>ai/contract_capsule.md</code> N/A Design templates <code>templates/docs.design.*</code> Local ADRs, requirements, architecture specific to this repo Tool templates <code>tools/*_TEMPLATE.py</code> Future <code>tools/local/</code> scripts (if introduced) Workflows <code>.github/workflows/examples/*.yml</code> <code>.github/workflows/*.yml</code> (annotated as instance-specific) Knowledge base <code>docs/kb/howtos/*</code> templates <code>docs/kb/dual-role.md</code>, repo-specific how-tos and guides Automation configs <code>.markdownlint-cli2.yaml</code>, <code>.markdownlintignore</code> release-please settings tied to this repo\u2019s cadence"},{"location":"kb/dual-role/#workflow-annotation","title":"Workflow Annotation","text":"<ul> <li>All instance workflows now carry a header comment noting they exist for this repository.</li> <li>Consumers should start from the examples under <code>.github/workflows/examples/</code> and adapt them to their stack and release automation.</li> </ul>"},{"location":"kb/dual-role/#directory-conventions","title":"Directory Conventions","text":"<ul> <li>Canonical tool templates remain under <code>tools/</code> with the <code>_TEMPLATE.py</code> suffix.</li> <li>If the instance needs custom scripts, place them under <code>tools/local/</code> (not currently present) to avoid confusion with distributable templates.</li> </ul>"},{"location":"kb/dual-role/#further-reading","title":"Further Reading","text":"<ul> <li>Quality Bar Linter Specification</li> <li>IP Rights &amp; Attestation Template</li> </ul>"},{"location":"kb/getting-started/","title":"Getting Started","text":"<p>This is a starter page. Add steps, references, and anchors as needed.</p>"},{"location":"kb/labels/","title":"Label taxonomy","text":"<p>Standard labels (from <code>ai/manifest.json</code>) used by this contract:</p> <ul> <li>from-ai</li> <li>needs-review</li> <li>docs</li> <li>chore</li> <li>security</li> <li>blocked</li> <li>planning</li> <li>needs-design-ref</li> <li>breaking-change</li> <li>content</li> <li>design</li> <li>asset</li> <li>deviation-approved</li> </ul> <p>Use <code>python tools/ai_contract_cli.py labels init</code> to create them in your repo.</p>"},{"location":"kb/repo-policies/","title":"Repository policies &amp; meta","text":"<p>These policy files live at the repository root and <code>.github/</code>. The site links to their GitHub locations:</p> <ul> <li>AGENTS.md \u2014 how AI agents operate: https://github.com/pvliesdonk/ai_engineer_contract/blob/develop/AGENTS.md</li> <li>SECURITY.md \u2014 coordinated disclosure: https://github.com/pvliesdonk/ai_engineer_contract/blob/develop/.github/SECURITY.md</li> <li>CODEOWNERS \u2014 default reviewers: https://github.com/pvliesdonk/ai_engineer_contract/blob/develop/.github/CODEOWNERS</li> <li>Manifest \u2014 machine-readable contract paths and labels: https://github.com/pvliesdonk/ai_engineer_contract/blob/develop/ai/manifest.json</li> </ul> <p>For downstream consumers, copy or adapt these to your repository.</p>"},{"location":"kb/architecture/","title":"Architecture Deep Dives","text":"<p>This is a placeholder section illustrating how to structure deep dives. Add subpages for components, data models, interfaces, and quality attributes.</p>"},{"location":"kb/howtos/","title":"How-Tos","text":"<p>This is a placeholder section for task-oriented documentation. Add guides for setup, workflows, and common operations.</p> <ul> <li>Phase Gates: advance and troubleshoot</li> <li>Plan \u2192 Build workflow</li> <li>Typical CI issues (markdownlint) and fixes</li> <li>Quality Bar Linter Specification</li> <li>IP Disclaimer &amp; Rights Attestation Template</li> <li>SCM Mode Decision Tree</li> <li>SCM-C Advise-Only Templates</li> <li>AI Model Recommendation Playbook</li> </ul>"},{"location":"kb/howtos/advise-only-templates/","title":"Advise-Only Mode (formerly SCM-C)","text":"<p>Advise-only mode means you do not change the repo state directly. You deliver changes as issues, PR bodies, review comments, or single-file diffs. Humans apply them.</p> <p>Use these templates verbatim and adapt the checklists to the repo\u2019s quality bar.</p>"},{"location":"kb/howtos/advise-only-templates/#issue-template-plan-before-build","title":"Issue Template \u2014 Plan Before Build","text":"<pre><code>**Summary**\n&lt;one line&gt;\n\n**Context &amp; Links**\n- Refs #&lt;umbrella&gt;\n\n**Acceptance Criteria**\n- [ ] &lt;measurable outcome&gt;\n\n**Validation**\n- &lt;command(s) to run&gt;\n\n**Phase**\nplan (docs/ops-only)\n</code></pre>"},{"location":"kb/howtos/advise-only-templates/#pr-body-template-docsconfig-only","title":"PR Body Template \u2014 Docs/Config Only","text":"<pre><code># Summary\n\n# Why\n\n# Changes\n\n# Validation\n\n&gt; Quick reference: **Phase Gate Quick-Escape** \u2014 see `docs/kb/howtos/phase-gates.md`.\n\n## Linked Issues\n- Fixes #&lt;id&gt;\n- Refs #&lt;id&gt;\n</code></pre>"},{"location":"kb/howtos/advise-only-templates/#review-comment-single-file-diff","title":"Review Comment \u2014 Single-File Diff","text":"<pre><code>*** path/to/file.ext\n@@\n- old line\n+ new line\n</code></pre>"},{"location":"kb/howtos/advise-only-templates/#deviation-request-when-gates-block-work","title":"Deviation Request (when gates block work)","text":"<p>Label: <code>deviation-approved</code> (maintainer applies)</p> <ul> <li>Rationale:  <li>Mitigation:  <li>Scope:"},{"location":"kb/howtos/binding-prompt/","title":"Bind an AI to your repo's Engineering Contract","text":"<p>Use this copy\u2011paste prompt at the start of a new chat so the AI immediately follows the contract in your repository. Replace the repo URL as needed.</p>"},{"location":"kb/howtos/binding-prompt/#generic-template","title":"Generic template","text":"<pre><code>You are bound by this repository\u2019s Engineering Contract. Follow it immediately and without deviation.\n\nRepo: https://github.com/&lt;OWNER&gt;/&lt;REPO&gt;\nPrimary sources:\n- docs/design/ENGINEERING_CONTRACT.md\n- AGENTS.md\n- ai/manifest.json\n\nTasks:\n1) Read those files.\n2) Reply EXACTLY: ACK CONTRACT v2.3.0\n3) Detect and state SCM mode (SCM-A / SCM-B / advise-only).\n4) List the contract obligations you will follow here.\n5) Propose 3 next steps.\n\nDefaults (override if this repo says otherwise):\n- Base branch develop; PRs \u2192 develop; squash merges.\n- Plan issue before build; reference with \u201cFixes #ID\u201d.\n- Keep docs in sync (docs/design/**, docs/kb/**).\n- Use label taxonomy from ai/manifest.json.\n- Run pre-commit (markdownlint etc.); CI must pass.\n- No secrets; use .env.example.\n- Releases via release-please on main; back-merge main \u2192 develop.\n- If advise-only, deliver ready-to-apply diffs and PR bodies.\n\nAsk concise questions only if blocked. Acknowledge and proceed.\n</code></pre>"},{"location":"kb/howtos/binding-prompt/#example-for-another-repo","title":"Example for another repo","text":"<pre><code>You are bound by this repository\u2019s Engineering Contract. Follow it immediately and without deviation.\n\nRepo: https://github.com/pvliesdonk/planescape\nPrimary sources:\n- docs/design/ENGINEERING_CONTRACT.md\n- AGENTS.md\n- ai/manifest.json\n\nDo this now:\n1) Fetch and read the above files.\n2) Reply EXACTLY with: ACK CONTRACT v2.3.0\n3) State SCM mode (SCM-A/SCM-B/advise-only) and proceed.\n4) Summarize obligations you will follow.\n5) Propose your first 3 concrete next steps.\n\nOperational rules (confirm from repo):\n- Base: develop; PRs \u2192 develop; squash.\n- Plan before build; reference issue in PR (Fixes #123).\n- Keep docs in sync; use standard labels; pass CI with pre-commit; no secrets; release-please main; back-merge main \u2192 develop.\n</code></pre>"},{"location":"kb/howtos/getting-started/","title":"Getting Started","text":"<p>This guide helps contributors and consumers start quickly while staying inside the contract.</p>"},{"location":"kb/howtos/getting-started/#1-clone-branch","title":"1) Clone &amp; Branch","text":"<pre><code># clone your fork or the repo\n# ensure you branch from develop\n\ngit checkout -b docs/first-change origin/develop\n</code></pre>"},{"location":"kb/howtos/getting-started/#2-install-hooks-optional-recommended","title":"2) Install hooks (optional, recommended)","text":"<pre><code># Run pre-commit locally to catch common issues\npipx install pre-commit || python -m pip install --user pre-commit\npre-commit install --install-hooks\npre-commit run --all-files\n</code></pre>"},{"location":"kb/howtos/getting-started/#3-initialize-labels-once-per-repo","title":"3) Initialize labels (once per repo)","text":"<pre><code>python tools/ai_contract_cli.py labels init\n</code></pre>"},{"location":"kb/howtos/getting-started/#4-plan-before-build","title":"4) Plan before build","text":"<p>Open a small Plan issue describing what you\u2019ll change and why. Link your PR with <code>Fixes #&lt;id&gt;</code>.</p>"},{"location":"kb/howtos/getting-started/#5-open-a-pr-to-develop","title":"5) Open a PR to <code>develop</code>","text":"<ul> <li>Use the PR template.</li> <li>Keep PRs small; squash-merge.</li> <li>For docs-only or config-only edits, CI should pass with lint + byte-compile.</li> </ul>"},{"location":"kb/howtos/getting-started/#6-advise-only-mode","title":"6) Advise-only mode","text":"<p>When you don\u2019t have write access, deliver advise-only packages (formerly \u201cSCM-C\u201d): issues, PR bodies, review diffs. See Advise\u2011Only Templates.</p>"},{"location":"kb/howtos/getting-started/#7-sync-the-canonical-contract-for-downstream-repos","title":"7) Sync the canonical contract (for downstream repos)","text":"<pre><code># bring the latest contract (and optionally tools) into your repo\npython tools/sync_canonical_contract_and_tools_TEMPLATE.py --include-tools\n</code></pre>"},{"location":"kb/howtos/getting-started/#8-release-docs-site","title":"8) Release docs site","text":"<p>This repo\u2019s <code>main</code> branch publishes a MkDocs site via GitHub Pages. Enable Pages for the <code>gh-pages</code> branch in repo settings.</p> <p>Related how\u2011tos:</p> <ul> <li>Phase Gates</li> <li>Model Recommendations</li> <li>Advise\u2011Only Templates</li> </ul>"},{"location":"kb/howtos/github-project-integration/","title":"GitHub Project Integration","text":""},{"location":"kb/howtos/github-project-integration/#intent","title":"Intent","text":"<ul> <li>Stand up a Projects (v2) board for <code>pvliesdonk/ai_engineer_contract</code>.</li> <li>Capture repeatable CLI steps to add fields, populate items, and highlight manual follow-ups.</li> </ul>"},{"location":"kb/howtos/github-project-integration/#prerequisites","title":"Prerequisites","text":"<ul> <li>Refresh your GitHub CLI token with project scopes:</li> </ul> <pre><code>gh auth refresh -h github.com -s project\n</code></pre>"},{"location":"kb/howtos/github-project-integration/#create-the-project","title":"Create the Project","text":"<pre><code>gh project create --owner pvliesdonk --title \"AI Engineer Contract \u2013 Implementation\"\n</code></pre> <p>Record the returned project number (e.g., <code>3</code>) and <code>projectId</code> (e.g., <code>PVT_kwHOAVKYys4BF4Sp</code>).</p>"},{"location":"kb/howtos/github-project-integration/#configure-fields","title":"Configure Fields","text":"<ol> <li>Add single-select fields for <code>Section</code> and <code>Priority</code>:</li> </ol> <pre><code>gh project field-create 3 --owner pvliesdonk --name \"Section\" --data-type SINGLE_SELECT \\\n  --single-select-options \"Governance,Decision Logging,Project Ops,Docs &amp; KB,Tooling\"\n\ngh project field-create 3 --owner pvliesdonk --name \"Priority\" --data-type SINGLE_SELECT \\\n  --single-select-options \"P0,P1,P2\"\n</code></pre> <ol> <li>Update the default <code>Status</code> field to include a <code>Review</code> stage (GraphQL required; CLI cannot edit options directly):</li> </ol> <pre><code>gh api graphql -F fieldId=&lt;statusFieldId&gt; \\\n  -f query='mutation($fieldId:ID!){updateProjectV2Field(input:{fieldId:$fieldId,name:\"Status\",singleSelectOptions:[\n    {name:\"Todo\",description:\"Backlog\",color:GRAY},\n    {name:\"In Progress\",description:\"Work in progress\",color:BLUE},\n    {name:\"Review\",description:\"Ready for review\",color:YELLOW},\n    {name:\"Done\",description:\"Completed\",color:GREEN}\n  ]}){projectV2Field{__typename}}}'\n</code></pre> <p>Replace <code>&lt;statusFieldId&gt;</code> with the value from <code>gh project field-list</code>.</p>"},{"location":"kb/howtos/github-project-integration/#add-issues","title":"Add Issues","text":"<ol> <li>Add each open proposal to the board:</li> </ol> <pre><code>for n in 42 43 44 45 46 47 49 55 57; do\n  gh project item-add 3 --owner pvliesdonk --url \\\n    https://github.com/pvliesdonk/ai_engineer_contract/issues/$n\ndone\n</code></pre> <ol> <li>Set <code>Section</code>, <code>Priority</code>, and <code>Status</code> (example for Issue #42):</li> </ol> <pre><code>gh project item-edit --id &lt;itemId&gt; --project-id PVT_kwHOAVKYys4BF4Sp \\\n  --field-id &lt;sectionFieldId&gt; --single-select-option-id 75aed36a   # Section: Governance\n\ngh project item-edit --id &lt;itemId&gt; --project-id PVT_kwHOAVKYys4BF4Sp \\\n  --field-id &lt;priorityFieldId&gt; --single-select-option-id d30edd57  # Priority: P1\n\ngh project item-edit --id &lt;itemId&gt; --project-id PVT_kwHOAVKYys4BF4Sp \\\n  --field-id &lt;statusFieldId&gt; --single-select-option-id 6245e92b    # Status: Todo\n</code></pre> <p>Use <code>gh project item-list 3 --owner pvliesdonk --format json</code> to locate item IDs after adding issues.</p>"},{"location":"kb/howtos/github-project-integration/#manual-view-setup","title":"Manual View Setup","text":"<ul> <li>The CLI cannot create views. In the web UI, add:</li> <li>Kanban view grouped by <code>Status</code> (columns: Todo, In Progress, Review, Done).</li> <li>Table view grouped by <code>Section</code> with <code>Priority</code> visible.</li> <li>Confirm default <code>Status</code> automation moves items between columns.</li> </ul>"},{"location":"kb/howtos/github-project-integration/#next-steps","title":"Next Steps","text":"<ul> <li>Keep Section/Priority assignments up to date as issues evolve.</li> <li>When new contract work is logged, add it to the board using the same commands.</li> <li>Revisit field colors/descriptions if the team establishes a different review flow.</li> </ul>"},{"location":"kb/howtos/ip-disclaimer/","title":"IP Disclaimer &amp; Rights Attestation Template","text":""},{"location":"kb/howtos/ip-disclaimer/#intent","title":"Intent","text":"<ul> <li>Provide a reusable template for documenting intellectual property rights, quotation allowances, and citation expectations.</li> <li>Standardise how contributors attest to the rights they are asserting when adding source material.</li> </ul>"},{"location":"kb/howtos/ip-disclaimer/#template-snippet","title":"Template Snippet","text":"<pre><code># IP Disclaimer\n\nWe confirm that all contributed content complies with applicable IP policies.\n\n- **Rights Attestation:** I have the right to submit this material. Extended quotations **are / are not** permitted under the following terms: `&lt;license or agreement&gt;`.\n- **Citation Requirements:** Cite sources inline. For physical media include page spans (e.g., \u201cpp. 42\u201347\u201d). For web sources include permalinks and retrieval dates.\n- **Third-Party Assets:** List any third-party assets (images, diagrams, audio) separately, including licence type and attribution text.\n- **Policy Contact:** `&lt;name/email&gt;` for escalation when new rights questions arise.\n</code></pre>"},{"location":"kb/howtos/ip-disclaimer/#usage-guidelines","title":"Usage Guidelines","text":"<ul> <li>Store the disclaimer in <code>IP_DISCLAIMER.md</code> at the repo root or under <code>docs/</code>.</li> <li>Require contributors to update the \u201cRights Attestation\u201d line whenever they introduce quoted or derivative content.</li> <li>For AI-assisted content, include model/provider details and prompt summaries within the same disclaimer or an adjacent appendix.</li> <li>Use <code>templates/docs.kb.ip_disclaimer_template.md</code> as a starting point when creating new disclaimers.</li> </ul>"},{"location":"kb/howtos/ip-disclaimer/#review-checklist","title":"Review Checklist","text":"<ol> <li>Does the submission state whether extended quotations are allowed?</li> <li>Are page spans or timestamps provided for each citation?</li> <li>Have third-party assets been inventoried with licence data?</li> <li>Has the policy contact been verified recently?</li> </ol>"},{"location":"kb/howtos/ip-disclaimer/#related-references","title":"Related References","text":"<ul> <li>Engineering Contract \u2013 IP Rights &amp; Attestation</li> <li>Dual Role \u2013 Canonical vs Instance Assets</li> </ul>"},{"location":"kb/howtos/model-recommendations/","title":"AI Model Recommendation Playbook","text":"<p>Document AI assistance plans using shared provider families, task routes, and manifest metadata. Use these examples as a baseline and tailor them to your organization\u2019s approved model catalog.</p>"},{"location":"kb/howtos/model-recommendations/#provider-families","title":"Provider Families","text":"<p>Use this YAML block to describe the preferred provider families during planning. Reference it from design docs and cross-link in the manifest.</p> <pre><code>ai_assist:\n  providers:\n    openai:\n      primary: gpt-5\n      thinking: gpt-5-thinking\n      fast: o4-mini\n      long_context: gpt-4.1\n    google:\n      primary: gemini-2.5-flash\n      thinking: gemini-2.5-pro\n      fast: gemini-2.5-flash-lite\n      long_context: gemini-2.5-pro\n    ollama:\n      primary: llama3.1:8b-instruct-q4_K_M\n      thinking: deepseek-r1:7b\n      fast: mistral:7b-instruct\n      long_context: mistral:7b-instruct\n  notes: &gt;\n    Document families in planning; pin exact SKUs only in deployable config.\n    For local models on 8 GB GPUs, prefer Q4_K_M quantizations for stability.\n</code></pre> <ul> <li>OpenAI \u2014 gpt-5 as the default \u201csmart\u201d model, gpt-5-thinking for deep reasoning, o4-mini for cheap/fast scaffolds, and gpt-4.1 for 1M-token context.</li> <li>Google AI Studio \u2014 gemini-2.5-flash (cost-effective generalist), gemini-2.5-pro for thinking/long context, and gemini-2.5-flash-lite for high throughput.</li> <li>Ollama (local) \u2014 tuned for an RTX 4060 (8 GB) using Q4_K_M weights: llama3.1:8b-instruct (generalist), deepseek-r1:7b (reasoning-style), and mistral:7b-instruct for fast scaffolds/32k context.</li> </ul>"},{"location":"kb/howtos/model-recommendations/#task-based-routes","title":"Task-Based Routes","text":"<p>Route requests to providers per task type. Teams may add fields (for example, latency budgets) as needed.</p> <pre><code>routes:\n  - when: { task: \"scm_c_advise\" }\n    openai: gpt-5\n    google: gemini-2.5-flash\n    ollama: llama3.1:8b-instruct-q4_K_M\n    notes: \"Low-latency, high-reliability responses for checklists and summaries.\"\n\n  - when: { task: \"policy_edit\", risk: \"high\" }\n    openai: gpt-5-thinking\n    google: gemini-2.5-pro\n    ollama: deepseek-r1:7b\n    set: { reasoning_required: true }\n    notes: \"Escalate to reasoning variants for nuanced contract or policy edits.\"\n\n  - when: { task: \"bulk_scaffold\" }\n    openai: o4-mini\n    google: gemini-2.5-flash-lite\n    ollama: mistral:7b-instruct\n    notes: \"Optimize for throughput when generating many small artifacts.\"\n\n  - when: { task: \"long_context\" }\n    openai: gpt-4.1\n    google: gemini-2.5-pro\n    ollama: mistral:7b-instruct\n    notes: \"GPT-4.1 and Gemini 2.5 Pro handle ~1M tokens; local models rely on RAG for &gt;32k.\"\n\n  - when: { task: \"bulk_narration\" }\n    openai: gpt-5\n    google: gemini-2.5-flash\n    ollama: gemma2:9b-instruct-q4_K_M\n    notes: \"Gemini Flash balances style and cost; Gemma 2 9B is a strong local narrator.\"\n\n  - when: { task: \"bulk_programming\" }\n    openai: gpt-5\n    google: gemini-2.5-pro\n    ollama: llama3.1:8b-instruct-q4_K_M\n    notes: \"Prefer stable 8\u20139B-class locals unless you have &gt;12 GB VRAM; consider DeepSeek Coder Lite if available.\"\n</code></pre>"},{"location":"kb/howtos/model-recommendations/#local-route-notes-for-8-gb-gpus","title":"Local route notes for 8 GB GPUs","text":"Lane Suggested route Approx VRAM Context Bulk narration gemma2:9b-instruct-q4_K_M ~7\u20138 GB 8\u201316k Bulk programming llama3.1:8b-instruct-q4_K_M ~6\u20137 GB 8\u201316k Reasoning (light) deepseek-r1:7b ~6\u20137 GB 8k Throughput mistral:7b-instruct ~5\u20136 GB 32k"},{"location":"kb/howtos/model-recommendations/#manifest-example","title":"Manifest Example","text":"<p>Extend ai/manifest.json so automation can detect the approved providers and routes.</p> <pre><code>{\n  \"ai_assist\": {\n    \"providers\": {\n      \"openai\": {\n        \"primary\": \"gpt-5\",\n        \"thinking\": \"gpt-5-thinking\",\n        \"fast\": \"o4-mini\",\n        \"long_context\": \"gpt-4.1\"\n      },\n      \"google\": {\n        \"primary\": \"gemini-2.5-flash\",\n        \"thinking\": \"gemini-2.5-pro\",\n        \"fast\": \"gemini-2.5-flash-lite\",\n        \"long_context\": \"gemini-2.5-pro\"\n      },\n      \"ollama\": {\n        \"primary\": \"llama3.1:8b-instruct-q4_K_M\",\n        \"thinking\": \"deepseek-r1:7b\",\n        \"fast\": \"mistral:7b-instruct\",\n        \"long_context\": \"mistral:7b-instruct\"\n      }\n    },\n    \"routes\": [\n      { \"when\": { \"task\": \"scm_c_advise\" },     \"openai\": \"gpt-5\", \"google\": \"gemini-2.5-flash\",      \"ollama\": \"llama3.1:8b-instruct-q4_K_M\" },\n      { \"when\": { \"task\": \"policy_edit\", \"risk\": \"high\" }, \"openai\": \"gpt-5-thinking\", \"google\": \"gemini-2.5-pro\", \"ollama\": \"deepseek-r1:7b\", \"set\": { \"reasoning_required\": true } },\n      { \"when\": { \"task\": \"bulk_scaffold\" },    \"openai\": \"o4-mini\", \"google\": \"gemini-2.5-flash-lite\", \"ollama\": \"mistral:7b-instruct\" },\n      { \"when\": { \"task\": \"long_context\" },     \"openai\": \"gpt-4.1\", \"google\": \"gemini-2.5-pro\",       \"ollama\": \"mistral:7b-instruct\" },\n      { \"when\": { \"task\": \"bulk_narration\" },   \"openai\": \"gpt-5\", \"google\": \"gemini-2.5-flash\",       \"ollama\": \"gemma2:9b-instruct-q4_K_M\" },\n      { \"when\": { \"task\": \"bulk_programming\" }, \"openai\": \"gpt-5\", \"google\": \"gemini-2.5-pro\",        \"ollama\": \"llama3.1:8b-instruct-q4_K_M\" }\n    ],\n    \"review_on_release\": true\n  }\n}\n</code></pre>"},{"location":"kb/howtos/model-recommendations/#maintenance-tips","title":"Maintenance Tips","text":"<ul> <li>Review provider lists each release cycle; replace models when new GA versions ship or when org policy changes.</li> <li>Document hardware assumptions for local deployments (for example, 8 GB VRAM for Q4_K_M quantizations).</li> <li>Encourage teams to add telemetry (latency, cost, tool usage) in project-specific docs so recommendations stay data informed.</li> </ul>"},{"location":"kb/howtos/phase-gates/","title":"Phase Gates \u2014 Advance and Troubleshoot","text":""},{"location":"kb/howtos/phase-gates/#overview","title":"Overview","text":"<ul> <li>The repository enforces contract phases via <code>phase.yaml</code> and a CI workflow (<code>.github/workflows/phase-gate.yml</code>).</li> <li>During <code>pull_request</code>, CI fails when changes touch paths outside the allowlist for the current phase.</li> </ul>"},{"location":"kb/howtos/phase-gates/#phases-and-defaults","title":"Phases and Defaults","text":"<ul> <li>requirements/design: allow <code>docs/**</code>, <code>AGENTS.md</code>, <code>ai/**</code>, <code>phase.yaml</code>.</li> <li>plan: allow the above + <code>.github/**</code>.</li> <li>build: unrestricted.</li> </ul> <p>You may override defaults by listing <code>allowed_paths</code> in <code>phase.yaml</code>.</p>"},{"location":"kb/howtos/phase-gates/#advance-the-phase","title":"Advance the Phase","text":"<p>1) Edit <code>phase.yaml</code> and set <code>phase: plan</code> (or <code>build</code>). 2) Commit in a small PR; once merged, subsequent PRs follow the new allowlist.</p>"},{"location":"kb/howtos/phase-gates/#temporary-deviation","title":"Temporary Deviation","text":"<ul> <li>Add label <code>deviation-approved</code> to the PR and include a rationale in the PR body.</li> <li>CI will accept the deviation, but reviewers should ensure rollback/mitigation.</li> </ul>"},{"location":"kb/howtos/phase-gates/#quick-escape-when-ci-blocks-your-pr","title":"Quick-Escape (when CI blocks your PR)","text":"<p>1) Add a Plan issue link (e.g., <code>Fixes #123</code>) to the PR body to satisfy the plan-before-build gate. 2) For micro-fixes, apply the <code>plan-exempt</code> label and explain the rationale. 3) If urgent but non-conforming, request a maintainer to apply <code>deviation-approved</code> and capture the rationale in the PR.</p>"},{"location":"kb/howtos/phase-gates/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>CI shows \u201cDisallowed changes\u2026\u201d: review the listed files and adjust <code>phase.yaml</code> or split the PR.</li> <li>Ensure the PR runs against <code>develop</code> and that <code>phase.yaml</code> is present at the repo root.</li> <li>For nested workflows or non-standard paths, add them to <code>allowed_paths</code>.</li> </ul>"},{"location":"kb/howtos/plan-to-build/","title":"Plan \u2192 Build Workflow","text":"<p>Follow this flow whenever you move from design into implementation.</p>"},{"location":"kb/howtos/plan-to-build/#1-draft-the-plan-issue","title":"1. Draft the Plan Issue","text":"<ul> <li>Open a new issue using the Plan template (<code>gh issue create --template plan</code> works too).</li> <li>Capture context links (design docs/ADRs), acceptance criteria, validation strategy, and risks.</li> <li>Add the issue to the relevant Project column (e.g., Ready for Build) so we can track progress.</li> </ul>"},{"location":"kb/howtos/plan-to-build/#2-validate-align","title":"2. Validate &amp; Align","text":"<ul> <li>Share the issue for review. Adjust acceptance criteria or scope until everyone agrees the plan is ready.</li> <li>If the plan changes later, update the issue first and call out changes in a comment.</li> </ul>"},{"location":"kb/howtos/plan-to-build/#3-reference-the-plan-from-prs","title":"3. Reference the Plan from PRs","text":"<ul> <li>Implementation PRs must reference the plan (<code>Fixes #123</code> / <code>Refs #123</code>) in the body.</li> <li>The phase-gate workflow checks for these references when <code>phase: build</code>. Without them, the PR fails unless it is explicitly labeled <code>plan-exempt</code>.</li> <li>Keep the plan issue updated as work lands (status notes, checklists, links to PRs).</li> </ul>"},{"location":"kb/howtos/plan-to-build/#4-exceptions","title":"4. Exceptions","text":"<ul> <li>Reserve the <code>plan-exempt</code> label for consciously approved micro-fixes. Document the rationale in both the PR and (if applicable) the related issue.</li> <li>Docs-only improvements that happen after the build phase still require a plan reference\u2014documentation is part of the product surface.</li> </ul>"},{"location":"kb/howtos/plan-to-build/#5-checklist","title":"5. Checklist","text":"<p>Every pre-build PR should confirm:</p> <ul> <li>[ ] Only planning/doc/ops files changed.</li> <li>[ ] Plan issue recorded or updated with acceptance criteria &amp; validation.</li> <li>[ ] Requirements/design docs stay in sync with the latest decisions.</li> </ul>"},{"location":"kb/howtos/quality-bar-linter/","title":"Quality Bar Linter Specification","text":""},{"location":"kb/howtos/quality-bar-linter/#intent","title":"Intent","text":"<ul> <li>Encode the repository \u201cQuality Bar\u201d into a repeatable linter that can run locally and in CI.</li> <li>Provide a portable checklist repositories can adopt in warn-only mode and later promote to a blocking gate.</li> <li>Reference: Section 27 of <code>docs/design/ENGINEERING_CONTRACT.md</code>.</li> </ul>"},{"location":"kb/howtos/quality-bar-linter/#checks","title":"Checks","text":"<p>The Quality Bar linter MUST validate at least the following:</p> <ol> <li>Front matter \u21d4 H1 alignment \u2013 The document title in YAML front matter matches the first H1.</li> <li>Status line present \u2013 Documents that require status (e.g., roadmap, ADRs) include the status field and valid value.</li> <li>Section completeness \u2013 Skeleton sections (e.g., \u201cTODO\u201d, \u201cTBD\u201d) are disallowed unless explicitly permitted by the contract.</li> <li>Link audit \u2013 No broken relative links inside <code>docs/</code>; prefer <code>markdown-link-check</code> or a comparable tool in dry-run mode.</li> <li>Citation hygiene \u2013 References must include source identifiers (URL, ISBN, etc.) and page spans when quoting physical media.</li> </ol>"},{"location":"kb/howtos/quality-bar-linter/#implementation-guidance","title":"Implementation Guidance","text":"<ul> <li>Start with a composite script (Python or Node) that orchestrates existing tools (markdownlint, regex checks, link checkers).</li> <li>Stage the linter in CI with warn-only output during requirements/design phases; flip to blocking once the repository reaches the \u201cbuild\u201d phase.</li> <li>Surface remediation hints in CI output to accelerate fixes.</li> </ul>"},{"location":"kb/howtos/quality-bar-linter/#cli-skeleton-python-example","title":"CLI Skeleton (Python Example)","text":"<pre><code># quality_bar.py\n</code></pre> <ul> <li>Implement each check as a function returning a list of violations.</li> <li>Exit code <code>0</code> when <code>--warn-only</code> is set; return <code>1</code> otherwise.</li> </ul>"},{"location":"kb/howtos/quality-bar-linter/#ci-integration","title":"CI Integration","text":"<ul> <li>Add a dedicated workflow (e.g., <code>.github/workflows/quality-bar.yml</code>) running on pull requests.</li> <li>During early adoption set <code>warn-only</code> to avoid blocking merges; switch to strict mode once the team confirms stability.</li> <li>Reference this document and the Engineering Contract quality section in the workflow description.</li> </ul>"},{"location":"kb/howtos/quality-bar-linter/#adoption-playbook","title":"Adoption Playbook","text":"<ol> <li>Document the selected implementation (Python, Node) in the repo\u2019s README/CONTRIBUTING.</li> <li>Communicate the rollout phases (warn-only \u2192 blocking) to contributors.</li> <li>Store custom configuration under <code>tools/quality_bar/</code> or similar for reuse.</li> <li>Periodically audit the linter to ensure the Quality Bar remains aligned with contract updates.</li> </ol>"},{"location":"kb/howtos/release-checklist/","title":"Release Checklist","text":"<p>Use this checklist before promoting a release PR or cutting a tag with release-please.</p> <ol> <li>Confirm release automation is ready</li> <li><code>RELEASE_PLEASE_TOKEN</code> should point to a PAT/App token with repo write access (a classic PAT with the <code>repo</code> scope works best).</li> <li> <p>The <code>release-please</code> workflow runs automatically on pushes to <code>main</code>; keep <code>workflow_dispatch</code> available for manual retries if needed.</p> </li> <li> <p>Validate contract version references</p> </li> </ol> <p><code>bash    python ai/check_version_refs.py</code></p> <p>Ensure the script exits successfully; fix any drift it reports before continuing.</p> <ol> <li>Review release PR contents</li> <li>Confirm <code>CHANGELOG.md</code> reflects the upcoming tag and lists the correct highlights.</li> <li> <p>Verify documentation updates (contract, capsule, README, KB) match the new version number.</p> </li> <li> <p>Inspect release notes (dry-run or staged)</p> </li> <li>Run <code>gh release view &lt;tag&gt; --json body</code> after staging to ensure notes mention the latest changes.</li> <li> <p>If release-please is generating notes, skim the PR description to ensure it captures the right commits.</p> </li> <li> <p>Back-merge and artifacts</p> </li> <li>After publishing, make sure the automated back-merge from <code>main</code> \u2192 <code>develop</code> completes.</li> <li>Update any outstanding release-trigger docs if manual clean-up was required.</li> </ol> <p>Document deviations or manual fixes in the release PR for traceability.</p>"},{"location":"kb/howtos/repo-hygiene-pre-commit/","title":"Repo hygiene with pre-commit (contract\u2011friendly)","text":"<p>This how\u2011to gives a minimal, tool\u2011agnostic setup that matches the contract\u2019s guidance. It keeps diffs clean and CI fast without forcing a language stack.</p>"},{"location":"kb/howtos/repo-hygiene-pre-commit/#why-this-setup","title":"Why this setup","text":"<ul> <li>Catch nits early (whitespace, EOF, YAML/JSON)</li> <li>Keep Markdown readable (markdownlint)</li> <li>Enforce commit message shape (gitlint)</li> <li>Same checks locally and in CI</li> </ul>"},{"location":"kb/howtos/repo-hygiene-pre-commit/#1-add-the-config","title":"1) Add the config","text":"<p>Create <code>.pre-commit-config.yaml</code> at the repo root (or extend your existing one):</p> <pre><code>repos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.6.0\n    hooks:\n      - id: trailing-whitespace\n      - id: end-of-file-fixer\n      - id: check-merge-conflict\n      - id: mixed-line-ending\n      - id: check-yaml\n      - id: check-json\n  - repo: https://github.com/jorisroovers/gitlint\n    rev: v0.19.1\n    hooks:\n      - id: gitlint\n        stages: [commit-msg]\n  - repo: https://github.com/DavidAnson/markdownlint-cli2\n    rev: v0.15.0\n    hooks:\n      - id: markdownlint-cli2\n        args: [\"--fix\"]\n</code></pre> <p>Optional: customize rules with <code>.markdownlint-cli2.yaml</code> (kept tiny):</p> <pre><code># .markdownlint-cli2.yaml\nconfig:\n  MD013: false   # no max line length for prose\n</code></pre>"},{"location":"kb/howtos/repo-hygiene-pre-commit/#2-install-and-run-locally","title":"2) Install and run locally","text":"<p>Use any Python\u2014this stays stdlib + pre-commit. With uv you can avoid global installs:</p> <pre><code>uvx pre-commit install --install-hooks\nuvx pre-commit run --all-files\n</code></pre> <p>Without uv:</p> <pre><code>pipx install pre-commit || python -m pip install --user pre-commit\npre-commit install --install-hooks\npre-commit run --all-files\n</code></pre> <p>Tips:</p> <ul> <li>Re-run on staged files only: <code>pre-commit run</code></li> <li>Skip a hook once: <code>SKIP=markdownlint-cli2 pre-commit run</code></li> <li>Update hook versions: <code>pre-commit autoupdate</code> (then commit the rev bumps)</li> </ul>"},{"location":"kb/howtos/repo-hygiene-pre-commit/#3-wire-ci-copypaste","title":"3) Wire CI (copy\u2011paste)","text":"<p>Add <code>.github/workflows/pre-commit.yml</code>:</p> <pre><code>name: pre-commit\n\non:\n  pull_request:\n    branches: [ develop ]\n  push:\n    branches: [ develop ]\n\njobs:\n  run:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-python@v5\n        with:\n          python-version: '3.x'\n      - name: Install pre-commit\n        run: |\n          python -m pip install --upgrade pip\n          pip install pre-commit gitlint\n      - name: Run pre-commit on all files\n        run: pre-commit run --all-files --show-diff-on-failure\n</code></pre>"},{"location":"kb/howtos/repo-hygiene-pre-commit/#4-common-lint-fixes","title":"4) Common lint fixes","text":"<ul> <li>MD022/MD032: add a blank line before/after headings and lists.</li> <li>MD001: don\u2019t jump heading levels (keep <code>###</code> after <code>##</code>).</li> <li>EOF/newlines: ensure a trailing newline and consistent <code>lf</code>.</li> </ul>"},{"location":"kb/howtos/repo-hygiene-pre-commit/#5-policy-vs-pragmatism","title":"5) Policy vs. pragmatism","text":"<p>Prefer fixing content, but path\u2011specific ignores are OK when format is externally constrained (e.g., copied issue templates). Example:</p> <pre><code># .markdownlint-cli2.yaml\nignores: [\n  \"docs/issues/**\"  # informal issue notes\n]\n</code></pre>"},{"location":"kb/howtos/repo-hygiene-pre-commit/#6-language-addons-optional","title":"6) Language add\u2011ons (optional)","text":"<ul> <li>Python: add black/ruff hooks via their official pre-commit repos.</li> <li>JS/TS: add eslint/prettier via local hooks or run them in a separate job.</li> </ul> <p>Contract note: keep CI fast; prefer formatters + light static checks first, then deeper tests as your codebase grows.</p>"},{"location":"kb/howtos/scm-c-advise/","title":"SCM-C Advise-Only Templates","text":""},{"location":"kb/howtos/scm-c-advise/#intent","title":"Intent","text":"<ul> <li>Provide ready-to-paste structures for SCM-C (advise-only) sessions.</li> <li>Clarify allowed outputs, forbidden actions, and when to escalate to SCM-B/A.</li> <li>Keep hand-offs auditable and easy for humans to apply manually.</li> </ul>"},{"location":"kb/howtos/scm-c-advise/#allowed-outputs","title":"Allowed Outputs","text":"<ul> <li>Issue, plan, or PR bodies that follow the contract sections (<code>Summary</code>, <code>Context</code>, <code>Acceptance</code>, etc.).</li> <li>Review-ready comment packages: findings list, risk callouts, approval/blocking recommendation.</li> <li>Validation and risk checklists that the human can copy into issues/PRs.</li> <li>Single-file inline unified diffs contained in fenced code blocks, paired with application notes.</li> </ul>"},{"location":"kb/howtos/scm-c-advise/#forbidden-actions","title":"Forbidden Actions","text":"<ul> <li>No filesystem edits, git commands, or script execution.</li> <li>Do not attach archives, binary artifacts, or multi-file patches.</li> <li>Avoid automation that would create branches, PRs, labels, or project items directly.</li> </ul>"},{"location":"kb/howtos/scm-c-advise/#escalate-when","title":"Escalate When","text":"<ul> <li>The request involves more than one file or requires command/script execution.</li> <li>The human wants push-ready patches, CLI automation, or CI runs.</li> <li>Security-sensitive work (secrets, repo settings) needs verification in SCM-A.</li> </ul>"},{"location":"kb/howtos/scm-c-advise/#recommended-labeling-tracking","title":"Recommended Labeling &amp; Tracking","text":"<ul> <li>Tag issues consuming SCM-C outputs with a local <code>advise-only</code> or <code>planning</code> label to support reporting.</li> <li>Capture lead time from \u201cProposed solution\u201d comment to merged PR in project dashboards for success metrics.</li> <li>Note in the issue/PR comment when handing off that the work followed SCM-C templates.</li> </ul>"},{"location":"kb/howtos/scm-c-advise/#templates","title":"Templates","text":""},{"location":"kb/howtos/scm-c-advise/#issue-plan-body","title":"Issue / Plan Body","text":"<pre><code>## Summary\n&lt;one sentence outcome&gt;\n\n## Context &amp; Links\n- docs/design/&lt;doc&gt;.md\n- Related issue #\n\n## Acceptance Criteria\n- [ ] &lt;observable result&gt;\n- [ ] &lt;observable result&gt;\n\n## Validation\n- `command` (expected to be run by human)\n- Manual: &lt;steps&gt;\n\n## Risks &amp; Mitigations\n- Risk: &lt;risk&gt; \u2014 Mitigation: &lt;plan&gt;\n</code></pre>"},{"location":"kb/howtos/scm-c-advise/#review-comment-package","title":"Review Comment Package","text":"<pre><code>**Findings**\n- [ ] Blocking \u2013 &lt;description&gt; (`path/to/file.ext:123`)\n- [ ] Non-blocking \u2013 &lt;description&gt;\n\n**Risks / Follow-up**\n- Risk: &lt;explanation&gt;\n- Mitigation: &lt;proposal or link&gt;\n\n**Recommendation**\n- Approve once blockers resolve.\n</code></pre>"},{"location":"kb/howtos/scm-c-advise/#status-checklist","title":"Status Checklist","text":"<pre><code>- [ ] Proposed solution documented\n- [ ] Human acknowledged SCM-C limitations\n- [ ] Inline diff applied manually\n- [ ] Follow-up issue/PR linked\n</code></pre>"},{"location":"kb/howtos/scm-c-advise/#inline-diff-snippet","title":"Inline Diff Snippet","text":"<pre><code>--- a/path/to/file.ext\n+++ b/path/to/file.ext\n@@\n-old line\n+new line\n</code></pre> <p>Application notes:</p> <ol> <li>Save the snippet above to <code>change.diff</code>.</li> <li>Run <code>git apply change.diff</code> from the repo root.</li> <li>Inspect the result (<code>git diff</code>) before staging.</li> </ol> <p>Tip: For Markdown-only tweaks, copy the diff into the GitHub web editor and apply manually if <code>git apply</code> is unavailable.</p>"},{"location":"kb/howtos/scm-c-advise/#maintenance-notes","title":"Maintenance Notes","text":"<ul> <li>Review this page when the engineering contract\u2019s SCM section changes.</li> <li>Update templates if new sections are added to plan/PR bodies or review formats.</li> <li>Reference <code>docs/design/ENGINEERING_CONTRACT.md</code> and <code>AGENTS.md</code> when scripting onboarding prompts.</li> </ul>"},{"location":"kb/howtos/scm-mode-decision-tree/","title":"SCM Mode Decision Tree","text":""},{"location":"kb/howtos/scm-mode-decision-tree/#intent","title":"Intent","text":"<ul> <li>Provide a quick checklist for agents to determine which Session Capability Mode (SCM) they are operating in.</li> <li>Clarify which operations are allowed per mode and when to pause for human confirmation.</li> </ul>"},{"location":"kb/howtos/scm-mode-decision-tree/#decision-flow","title":"Decision Flow","text":"<pre><code>flowchart TD\n    A[Start Session] --&gt; B{Can you read/write the filesystem?}\n    B -- No --&gt; SCMC[SCM-C\\nAdvise-Only]\n    B -- Yes --&gt; C{Can you run git push or gh?}\n    C -- No --&gt; SCMB[SCM-B\\nIDE Co-Driver]\n    C -- Yes --&gt; D{Do you have push rights / tokens?}\n    D -- Yes --&gt; SCMA[SCM-A\\nFull-Stack]\n    D -- No --&gt; SCMB\n</code></pre>"},{"location":"kb/howtos/scm-mode-decision-tree/#mode-summary","title":"Mode Summary","text":"Mode Allowed Operations Requires Confirmation SCM-A Create branches/PRs, push commits, run CI, create repos/projects, manage labels Repo creation, visibility changes, secrets updates SCM-B Local edits, diff generation, scripts/patches, documentation updates Any action that mutates remote state (ask human) SCM-C Advise-only packages (issue/plan/PR bodies, reviews, checklists, single-file diffs) Any filesystem or git action; multi-file or automated changes"},{"location":"kb/howtos/scm-mode-decision-tree/#confirmation-checklist","title":"Confirmation Checklist","text":"<p>Before performing privileged operations (repo creation, branch protection, secret rotation):</p> <ol> <li>State the intended action and confirm the mode.</li> <li>Ask for explicit human approval if outside SCM-B boundaries.</li> <li>Log the approval (issue/PR comment or chat transcript).</li> </ol>"},{"location":"kb/howtos/scm-mode-decision-tree/#see-also","title":"See Also","text":"<ul> <li>Engineering Contract \u2013 Session Capability Modes</li> <li>Session-Mode Handshake Capsule</li> <li>SCM-C Advise-Only Templates</li> </ul>"},{"location":"kb/howtos/sync-canonical/","title":"Sync Canonical Contract and Tools","text":""},{"location":"kb/howtos/sync-canonical/#intent","title":"Intent","text":"<ul> <li>Keep your repository aligned with the canonical Engineering Contract (and optionally tool templates) via a small, reviewable PR.</li> </ul>"},{"location":"kb/howtos/sync-canonical/#dry-run-and-defaults","title":"Dry Run and Defaults","text":"<pre><code>python tools/sync_canonical_contract_and_tools_TEMPLATE.py --dry-run\n</code></pre> <ul> <li>Defaults: contract-only, base = develop, source = latest canonical release tag.</li> </ul>"},{"location":"kb/howtos/sync-canonical/#pinning-tools-and-capsule","title":"Pinning, Tools, and Capsule","text":"<pre><code># Pin to a specific tag/ref\n    python tools/sync_canonical_contract_and_tools_TEMPLATE.py --source-ref ai_engineer_contract-v2.3.0\n\n# Include canonical tool templates (*_TEMPLATE.py only)\npython tools/sync_canonical_contract_and_tools_TEMPLATE.py --include-tools\n\n# Sync the minimal AI capsule as well\npython tools/sync_canonical_contract_and_tools_TEMPLATE.py --include-capsule\n</code></pre>"},{"location":"kb/howtos/sync-canonical/#overwrite-safety","title":"Overwrite Safety","text":"<ul> <li>The script writes provenance markers (synced sha) into synced files and refuses to overwrite when a different synced sha is detected.</li> <li>To override (use with care):</li> </ul> <pre><code>python tools/sync_canonical_contract_and_tools_TEMPLATE.py --force\n</code></pre>"},{"location":"kb/howtos/sync-canonical/#configuration","title":"Configuration","text":"<ul> <li>You can set defaults in <code>ai/sync.config.json</code>:</li> </ul> <pre><code>{\n  \"sourceRepo\": \"pvliesdonk/ai_engineer_contract\",\n  \"sourceRef\": \"latest\",\n  \"syncContract\": true,\n  \"syncTools\": [\"*_TEMPLATE.py\"],\n  \"includeCapsule\": false,\n  \"exclude\": []\n}\n</code></pre>"},{"location":"kb/howtos/typical-ci-issues/","title":"Typical CI Issues (markdownlint) and Fixes","text":""},{"location":"kb/howtos/typical-ci-issues/#common-rules","title":"Common Rules","text":"<ul> <li>MD022: Headings should be surrounded by blank lines.</li> <li>MD032: Lists should be surrounded by blank lines.</li> <li>MD007: Unordered list indentation.</li> <li>MD005: Inconsistent indentation for list items.</li> <li>MD012: Multiple consecutive blank lines.</li> </ul>"},{"location":"kb/howtos/typical-ci-issues/#check-and-fix-locally","title":"Check and Fix Locally","text":"<pre><code># check\nmarkdownlint-cli2 \"**/*.md\" \"!**/node_modules/**\" \"!**/.git/**\"\n\n# fix\nmarkdownlint-cli2 --fix \"**/*.md\" \"!**/node_modules/**\" \"!**/.git/**\"\n</code></pre>"},{"location":"kb/howtos/typical-ci-issues/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Ensure <code>.markdownlint-cli2.yaml</code> and <code>.markdownlintignore</code> are present and match CI.</li> <li>Quote globs to avoid shell expansion issues.</li> <li>Consider pre-commit hooks for markdownlint to shorten feedback loops.</li> </ul>"},{"location":"release-notes/v2.4.0/","title":"Release v2.4.0 \u2013 Policy-driven Phase Gate","text":""},{"location":"release-notes/v2.4.0/#what-changed","title":"What changed","text":"<ul> <li>Add <code>policy</code> block to <code>ai/manifest.json</code> describing base branch, release automation, docs roots, and phase-gate rules.</li> <li>Refactor <code>.github/workflows/phase-gate.yml</code> to consume manifest policy, emit structured failure reports, and comment on blocked PRs.</li> <li>Introduce <code>tools/contract_lint.py</code> with a CI workflow to verify manifest shape, required artifacts, and label taxonomy.</li> <li>Document policy knobs in the contract, capsule, and README so humans know where to look.</li> </ul>"},{"location":"release-notes/v2.4.0/#why-it-matters","title":"Why it matters","text":"<ul> <li>Downstream repos can override governance via manifest policy instead of editing workflows.</li> <li>Contributors now receive actionable guidance when the phase gate stops a PR, reducing back-and-forth.</li> <li>Contract linting catches drift early and keeps generated docs and metadata aligned.</li> </ul>"},{"location":"release-notes/v2.4.0/#actions-for-consumers","title":"Actions for consumers","text":"<ul> <li>Ensure your fork includes the new <code>ai/manifest.json::policy</code> block when syncing this release.</li> <li>If you customize phase rules, mirror the structure before relaxing build requirements.</li> <li>Run <code>python tools/contract_lint.py</code> (or enable the provided workflow) to validate your copy after syncing.</li> </ul>"}]}