#!/usr/bin/env python3
from __future__ import annotations
import base64, json, os, shutil, subprocess, sys
from datetime import datetime
from pathlib import Path

OWNER = "pvliesdonk"
REPO  = "<REPO_NAME_HERE>"   # name-only (no owner)
BASE_BRANCH = os.environ.get("BASE_BRANCH", "develop")  # allow 'development'
PR_TITLE = "chore: sync canonical contract/tools to v1.5.0"
PR_BODY  = "# Sync canonical contract/tools\n\nThis PR updates ENGINEERING_CONTRACT.md and tools/* to v1.5.0.\nLabels: from-ai, needs-review, docs\n"
PR_LABELS = ["from-ai","needs-review","docs"]
LABEL_COLORS = {"from-ai":"5319e7","needs-review":"d93f0b","docs":"0e8a16"}

SCRATCH_DIR = Path("/mnt/scratch")
TIMESTAMP = datetime.utcnow().strftime("%Y%m%d_%H%M%S")
WORKDIR = SCRATCH_DIR / f"sync_contract_{OWNER}_{REPO}_{TIMESTAMP}"

PAYLOADS_B64 = json.loads('{"ENGINEERING_CONTRACT.md": "IyBFTkdJTkVFUklOR19DT05UUkFDVC5tZCAoQUkgw5cgUGV0ZXIpIOKAlCB2MS41LjAKCkVmZmVjdGl2ZTogMjAyNS0xMC0xNCAwMDowMDowMCBVVEMKT3duZXI6IFBldGVyIHZhbiBMaWVzZG9uayAoYHB2bGllc2RvbmtgKQpQdXJwb3NlOiBDb25zaXN0ZW50LCBhdWRpdGFibGUgY29sbGFib3JhdGlvbiBvbiBzb2Z0d2FyZSBhbmQgZG9jcy4KClRoaXMgaXMgdGhlIGNhbm9uaWNhbCBjb250cmFjdC4gS2VlcCBhIGNvcHkgYXQgdGhlIHJlcG9zaXRvcnkgcm9vdCBhbmQgcmVmbGVjdCBpdCBpbiB0aGUgQ2hhdEdQVCBQcm9qZWN0IHByb21wdC4KCi0tLQoKIyMgMSkgQnJhbmNoZXMgJiBGbG93IChVUERBVEVEKQotIFdvcmsgdW5kZXIgYHB2bGllc2Rvbmsve3JlcG9fbmFtZX1gLgotIGBtYWluYCA9IHJlbGVhc2VzIG9ubHkgKHZpYSBgZGV2ZWxvcCDihpIgbWFpbmAgd2hlbiByZXF1ZXN0ZWQpLgotICoqQnJhbmNoIG5hbWUgY29udmVudGlvbjoqKiB0aGUgd2lkZXNwcmVhZCBHaXQtRmxvdyBjb252ZW50aW9uIGlzICoqYGRldmVsb3BgKiogKG5vdCBgZGV2ZWxvcG1lbnRgKS4gV2Uga2VlcCAqKmBkZXZlbG9wYCoqIGFzIHRoZSAqKmRlZmF1bHQqKi4KICAtICoqQWxpYXMgc3VwcG9ydDoqKiBQcm9qZWN0cyB0aGF0IGFscmVhZHkgdXNlIGBkZXZlbG9wbWVudGAgYXJlIGFsbG93ZWQuIFRvb2xzIE1VU1Qgc3VwcG9ydCBhbiBvdmVycmlkZSBvZiB0aGUgUFIgYmFzZSBicmFuY2ggdmlhIGBCQVNFX0JSQU5DSGAgZW52IHZhcmlhYmxlLgogIC0gRXhhbXBsZTogYEJBU0VfQlJBTkNIPWRldmVsb3BtZW50IHB5dGhvbiB0b29scy9wcl9mcm9tX2RpZmZfVEVNUExBVEUucHlgCi0gYGRldmVsb3BgIChvciBgZGV2ZWxvcG1lbnRgIGlmIG92ZXJyaWRkZW4pID0gYmFzZSBmb3IgUFJzLiBVc2UgYGZlYXQvPHNsdWc+YCwgYGZpeC88c2x1Zz5gLCBgZG9jcy88c2x1Zz5gLCBgY2hvcmUvPHNsdWc+YCwgYHJlZmFjdG9yLzxzbHVnPmAsIGB0ZXN0LzxzbHVnPmAuCi0gQWx3YXlzIHJlYmFzZSBvbiBgb3JpZ2luLzxCQVNFX0JSQU5DSD5gIGJlZm9yZSBQUi4gU3F1YXNoLW1lcmdlIGludG8gdGhlIGJhc2UgYnJhbmNoLgoKIyMgMikgUFIgUXVhbGl0eQotIENvbnZlbnRpb25hbCBDb21taXQgdGl0bGUgKGBmZWF0OmAsIGBmaXg6YCwg4oCmKS4KLSBCb2R5OiBTdW1tYXJ5LCBXaHksIENoYW5nZXMsIFZhbGlkYXRpb24sIFJpc2sgJiBSb2xsYmFjaywgTm90ZXMuCi0gU21hbGwsIGZvY3VzZWQgZGlmZnM7IHVwZGF0ZSBkb2NzL3Rlc3RzIHdpdGggYmVoYXZpb3IgY2hhbmdlcy4KCiMjIDMpIFJlbGVhc2VzCi0gUFIgYDxCQVNFX0JSQU5DSD4g4oaSIG1haW5gIHRpdGxlZCBgcmVsZWFzZTogdlguWS5aYC4gQWZ0ZXIgbWVyZ2UsIHRhZyBgdlguWS5aYCBhbmQgY3JlYXRlIGEgR2l0SHViIFJlbGVhc2UuCgojIyA0KSBBY2Nlc3MgTW9kZXMKLSBXaXRoIEdpdEh1YiBhY2Nlc3M6IG9wZXJhdGUgZGlyZWN0bHkgdW5kZXIgdGhpcyBjb250cmFjdC4KLSBXaXRob3V0IGFjY2VzczogZGVsaXZlciBhIHNpbmdsZS1maWxlIFBSIHNjcmlwdCB1c2luZyBgZ2l0YCArIGBnaGAgdGhhdCBicmFuY2hlcyBmcm9tIGBvcmlnaW4vPEJBU0VfQlJBTkNIPmAsIGFwcGxpZXMgZW1iZWRkZWQgY2hhbmdlcywgKipjcmVhdGVzIG1pc3NpbmcgbGFiZWxzKiosIGFuZCBvcGVucyBhIFBSIHRvIGA8QkFTRV9CUkFOQ0g+YC4KCiMjIDUpIEFydGlmYWN0IERlbGl2ZXJ5IOKAlCBBTFdBWVMgRG93bmxvYWRhYmxlCi0gRXZlcnkgZGVsaXZlcmFibGUgKHNjcmlwdHMsIGxvbmcgZGlmZnMsIGRvY3MpIG11c3QgYmUgcHJvdmlkZWQgYXMgYSAqKmRvd25sb2FkYWJsZSBmaWxlKiogaW4gY2hhdC4KICBTaG9ydCBzY3JpcHRzIG1heSBhbHNvIGJlIHNob3duIGlubGluZTsgbG9uZyBvbmVzIGNhbiBiZSBoaWRkZW4gYnV0IHN0aWxsIGRvd25sb2FkYWJsZS4KLSBQcm92aWRlIGEgb25lLXBhcmFncmFwaCBzeW5vcHNpcyBhbmQgKipleGFjdCBydW4gY29tbWFuZChzKSoqIGZvciBlYWNoIGFydGlmYWN0LgoKIyMgNikgUm9idXN0IERlbGltaXRlcnMgJiBFc2NhcGluZwotIFVzZSByYXcgdHJpcGxlLXF1b3RlZCBzdHJpbmdzIChgciIiIi4uLiIiImApLCBub3JtYWxpemUgdG8gTEYsIGJhc2U2NCBmb3IgYmluYXJ5L2ZyYWdpbGUgcGF5bG9hZHMsIGFuZCBzaW5nbGUtcXVvdGVkIGhlcmVkb2NzIChgPDwnRU9GJ2ApLiBPcHRpb25hbCBTSEEtMjU2IHZlcmlmaWNhdGlvbiBmb3IgcGF5bG9hZHMuCgojIyA3KSBTZWN1cml0eQotIE5vIHNlY3JldHMuIFVzZSBgLmVudi5leGFtcGxlYCwgYC5naXRpZ25vcmVgLiBSZWRhY3Qgc2Vuc2l0aXZlIHZhbHVlcyBpbiBsb2dzL1BScy4KCiMjIDgpIENvbW11bmljYXRpb24KLSBDb25jaXNlIHByb2dyZXNzOyBkZXRlcm1pbmlzdGljIHNjcmlwdHM7IHBpbiB2ZXJzaW9ucyB3aGVyZSBzZW5zaWJsZS4KCiMjIDkpIE5vbi1Qcm9ncmFtbWluZyBSZXBvcwotIFNhbWUgcHJvY2Vzcy4gVmFsaWRhdGlvbiBhZGFwdHMgKGxpbmsgY2hlY2tlcnMsIE1hcmtkb3dubGludCwgTWtEb2NzL21kQm9vaywgZXRjLikuCgojIyAxMCkgTmV3IFJlcG8gQm9vdHN0cmFwCi0gKipDb25maXJtIExJQ0VOU0UqKiBmaXJzdCAoZGVmYXVsdCAqKk1JVCoqKS4gQ3JlYXRlIGBMSUNFTlNFYCwgYFJFQURNRS5tZGAsIGBDT05UUklCVVRJTkcubWRgLCBtaW5pbWFsIGAuZ2l0aWdub3JlYC4gQ3JlYXRlL3B1c2ggYG1haW5gIGFuZCBgPEJBU0VfQlJBTkNIPmAuIEVuc3VyZSBkZWZhdWx0IGxhYmVscyBleGlzdC4KCiMjIDExKSBDYW5vbmljYWwgU291cmNlICYgRGlzdHJpYnV0aW9uCi0gQ2Fub25pY2FsIHJlcG86IGBwdmxpZXNkb25rL2FpX2VuZ2luZWVyX2NvbnRyYWN0YC4KLSBFdmVyeSBuZXcgcmVwbyBtdXN0IGluY2x1ZGUgdGhlICoqbGF0ZXN0KiogYEVOR0lORUVSSU5HX0NPTlRSQUNULm1kYCBhbmQgdGhlIGB0b29scy9gIGZvbGRlcjoKICAtIGB0b29scy9wcl9mcm9tX2RpZmZfVEVNUExBVEUucHlgCiAgLSBgdG9vbHMvcmVwb19ib290c3RyYXBfVEVNUExBVEUucHlgCi0gQWNjZXB0YWJsZSBtZWNoYW5pc21zOiBjb3B5IGF0IGNyZWF0aW9uLCB0ZW1wbGF0ZSByZXBvLCBvciBnaXQgc3VidHJlZSBmb3IgYHRvb2xzL2AgKGF2b2lkIHN1Ym1vZHVsZXMgdW5sZXNzIHN0cmljdGx5IG5lZWRlZCkuCgojIyAxMikgTGFiZWxzCi0gQ29tbWl0cy9QUnMgbXVzdCBpbmNsdWRlIGFwcHJvcHJpYXRlIGxhYmVscy4gU2NyaXB0cyAqKmF1dG8tY3JlYXRlKiogbWlzc2luZyBsYWJlbHMgdmlhIGBnaCBsYWJlbCBjcmVhdGVgLgoKIyMgMTMpIEF1dG8tVXBncmFkZSBpbiBDaGF0Ci0gV2hlbiBhIG5ld2VyIGNvbnRyYWN0IHZlcnNpb24gb3IgdG9vbCBhcHBlYXJzIHdpdGhpbiB0aGUgY3VycmVudCBjaGF0L3Byb2plY3QsIHRoZSBBSSBtdXN0IGltbWVkaWF0ZWx5IHN3aXRjaCB0byB0aGUgbmV3ZXN0IGF2YWlsYWJsZSB2ZXJzaW9uIGZvciBzdWJzZXF1ZW50IGFjdGlvbnMgaW4gdGhpcyBjb252ZXJzYXRpb24uCgojIyAxNCkgQXV0by1VcGRhdGUgUmVwb3NpdG9yaWVzCi0gV2hlbiBhIG5ld2VyIGNvbnRyYWN0IG9yIHRvb2wgaXMgYXZhaWxhYmxlIGluIGNoYXQsIHRoZSBBSSBtdXN0IGFsc28gdXBkYXRlIHRoZSBhY3RpdmUgcmVwb3NpdG9yeSB0byB0aGF0IHZlcnNpb24gYnkgb3BlbmluZyBhIFBSIHRoYXQgcmVwbGFjZXMgYEVOR0lORUVSSU5HX0NPTlRSQUNULm1kYCBhbmQgYHRvb2xzLypgIHdpdGggdGhlIG5ld2VyIHZlcnNpb25zICh1bmxlc3MgdGhlIHVzZXIgb3B0cyBvdXQpLgotIFBSIHRpdGxlOiBgY2hvcmU6IHN5bmMgY2Fub25pY2FsIGNvbnRyYWN0L3Rvb2xzIHRvIHY8dmVyc2lvbj5gLiBMYWJlbHM6IGBmcm9tLWFpYCwgYG5lZWRzLXJldmlld2AsIGBkb2NzYC4KLSBJZiBsb2NhbCBkZWx0YXMgZXhpc3QsIGNhbGwgdGhlbSBvdXQgaW4gdGhlIFBSIGJvZHk7IHByZWZlciBwcmVzZXJ2aW5nIHByb2plY3Qtc3BlY2lmaWMgc2VjdGlvbnMgaW4gYEVOR0lORUVSSU5HX0NPTlRSQUNUX0xPQ0FMLm1kYC4KCiMjIDE1KSBUT0RPcyAmIE5vdC1JbXBsZW1lbnRlZCBTdHVicyAoTkVXKQotIFdoZW4gd3JpdGluZyBwcm9ncmFtIGNvZGUgYW5kIHN0dWJiaW5nIGJlaGF2aW9yLCAqKmFsd2F5cyoqIGluY2x1ZGUgZXhwbGljaXQgVE9ETyBtYXJrZXJzIGFuZCBmYWlsIGZhc3Q6CiAgLSBQeXRob246IGAjIFRPRE86IHJlYXNvbiDigKZgIGFuZCBgcmFpc2UgTm90SW1wbGVtZW50ZWRFcnJvcigiVE9ETzogPHJlYXNvbj4iKWAgKG9yIGB3YXJuaW5ncy53YXJuKCJUT0RPOiDigKYiLCBOb3RJbXBsZW1lbnRlZFdhcm5pbmcpYCB3aGVuIG5vbi1mYXRhbCkuCiAgLSBKYXZhU2NyaXB0L1R5cGVTY3JpcHQ6IGAvLyBUT0RPOiByZWFzb24g4oCmYCBhbmQgYHRocm93IG5ldyBFcnJvcigiVE9ETzogPHJlYXNvbj4iKWAgKG9yIGEgYGNvbnNvbGUud2FybmAgcGx1cyBhIGd1YXJkKS4KICAtIE90aGVyIGxhbmd1YWdlczogaW5jbHVkZSBgVE9ETzpgIGNvbW1lbnRzIGFuZCBhbiBleHBsaWNpdCBydW50aW1lIGVycm9yL2V4Y2VwdGlvbiB3aGVyZSBmZWFzaWJsZS4KLSBQbGFjZSBUT0RPcyAqKmF0IHRoZSBjYWxsIHNpdGUgYW5kL29yIGZ1bmN0aW9uIGJvZHkqKiBzbyBmdXR1cmUgcmVhZGVycyBoaXQgdGhlbSBpbiBjb2RlIHJldmlldyBhbmQgdGVzdHMuCgotLS0KCiMjIyBTdWdnZXN0ZWQgTGFiZWxzIChhdXRvLWNyZWF0ZWQgaWYgYWJzZW50KQpgZnJvbS1haWAsIGBuZWVkcy1yZXZpZXdgLCBgYmxvY2tlZGAsIGBzZWN1cml0eWAsIGBicmVha2luZy1jaGFuZ2VgLCBgZG9jc2AsIGBjaG9yZWAsIGBjb250ZW50YCwgYGRlc2lnbmAsIGBhc3NldGAKCi0tLQoKIyMjIENoYW5nZWxvZwotIHYxLjUuMCDigJQgS2VlcCBgZGV2ZWxvcGAgYXMgZGVmYXVsdCAod2l0aCBgQkFTRV9CUkFOQ0hgIG92ZXJyaWRlIGZvciBgZGV2ZWxvcG1lbnRgKTsgcmVxdWlyZSBUT0RPIG1hcmtlcnMgYW5kIGV4cGxpY2l0IG5vdC1pbXBsZW1lbnRlZCBzaWduYWxzIGluIGNvZGUgc3R1YnMuCi0gdjEuNC4wIOKAlCBBbHdheXMgcHJvdmlkZSBkZWxpdmVyYWJsZXMgYXMgZG93bmxvYWRzOyBhdXRvLXN3aXRjaCBpbiBjaGF0OyBhdXRvLXVwZGF0ZSByZXBvcyB2aWEgUFIuCi0gdjEuMy4wIOKAlCBDYW5vbmljYWwgZGlzdHJpYnV0aW9uIGFjcm9zcyByZXBvcy4KLSB2MS4yLjAg4oCUIE5ldyByZXBvIGJvb3RzdHJhcCAobGljZW5zZSBjb25maXJtYXRpb24sIENPTlRSSUJVVElORykuCi0gdjEuMS4wIOKAlCBSb2J1c3QgZXNjYXBpbmcsIGF1dG8tbGFiZWxzLCBub24tY29kZSByZXBvcy4KLSB2MS4wLjEg4oCUIERlbGl2ZXJhYmxlcyBkb3dubG9hZGFibGUuCi0gdjEuMC4wIOKAlCBJbml0aWFsLgo=", "tools/pr_from_diff_TEMPLATE.py": "IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwpmcm9tIF9fZnV0dXJlX18gaW1wb3J0IGFubm90YXRpb25zCmltcG9ydCBiYXNlNjQsIGhhc2hsaWIsIG9zLCBzaHV0aWwsIHN1YnByb2Nlc3MsIHN5cywganNvbgpmcm9tIGRhdGFjbGFzc2VzIGltcG9ydCBkYXRhY2xhc3MKZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUKZnJvbSBwYXRobGliIGltcG9ydCBQYXRoCmZyb20gdHlwaW5nIGltcG9ydCBEaWN0LCBMaXN0LCBPcHRpb25hbAoKT1dORVIgPSAicHZsaWVzZG9uayIKUkVQTyAgPSAiPFJFUE9fTkFNRV9IRVJFPiIKQkFTRV9CUkFOQ0ggPSBvcy5lbnZpcm9uLmdldCgiQkFTRV9CUkFOQ0giLCAiZGV2ZWxvcCIpClBSX1RJVExFID0gImZlYXQ6IDxlZGl0IG1lPiBzaG9ydCwgaW1wZXJhdGl2ZSBzdW1tYXJ5IgpQUl9CT0RZICA9ICIjIFN1bW1hcnlcbjx3aHkvY2hhbmdlcy92YWxpZGF0aW9uL3Jpc2s+IgpCUkFOQ0hfTkFNRSA9ICIiCkRJRkZfQ09OVEVOVCA9IHIiIgpESUZGX0I2NCA9ICIiCkRJRkZfU0hBMjU2ID0gIiIKRklMRV9CTE9CUzogRGljdFtzdHIsIHN0cl0gPSB7fQpQUl9MQUJFTFMgPSBbImZyb20tYWkiLCAibmVlZHMtcmV2aWV3Il0KTEFCRUxfQ09MT1JTID0geyJmcm9tLWFpIjoiNTMxOWU3IiwibmVlZHMtcmV2aWV3IjoiZDkzZjBiIiwiYmxvY2tlZCI6ImI2MDIwNSIsInNlY3VyaXR5IjoiMDAwMDAwIiwiYnJlYWtpbmctY2hhbmdlIjoiZTExZDIxIiwiZG9jcyI6IjBlOGExNiIsImNob3JlIjoiYzVkZWY1IiwiY29udGVudCI6IjFkNzZkYiIsImRlc2lnbiI6ImZiY2EwNCIsImFzc2V0IjoiYmZkYWRjIn0KUFJfUkVWSUVXRVJTOiBMaXN0W3N0cl0gPSBbXQoKU0NSQVRDSF9ESVIgPSBQYXRoKCIvbW50L3NjcmF0Y2giKQpUSU1FU1RBTVAgPSBkYXRldGltZS51dGNub3coKS5zdHJmdGltZSgiJVklbSVkXyVIJU0lUyIpCldPUktESVIgPSBTQ1JBVENIX0RJUiAvIGYicHJfd29ya197T1dORVJ9X3tSRVBPfV97VElNRVNUQU1QfSIKCkBkYXRhY2xhc3MKY2xhc3MgQ21kUmVzdWx0OgogICAgY29kZTogaW50CiAgICBvdXQ6IHN0cgogICAgZXJyOiBzdHIKCmRlZiBydW4oY21kOiBMaXN0W3N0cl0sIGN3ZDogT3B0aW9uYWxbUGF0aF09Tm9uZSwgY2hlY2s9RmFsc2UpLT5DbWRSZXN1bHQ6CiAgICBwPXN1YnByb2Nlc3MucnVuKGNtZCxjd2Q9c3RyKGN3ZCkgaWYgY3dkIGVsc2UgTm9uZSx0ZXh0PVRydWUsc3Rkb3V0PXN1YnByb2Nlc3MuUElQRSxzdGRlcnI9c3VicHJvY2Vzcy5QSVBFKQogICAgaWYgY2hlY2sgYW5kIHAucmV0dXJuY29kZSE9MDoKICAgICAgICByYWlzZSBSdW50aW1lRXJyb3IoZiJDb21tYW5kIGZhaWxlZDoge2NtZH1cblNURE9VVDpcbntwLnN0ZG91dH1cblNUREVSUjpcbntwLnN0ZGVycn0iKQogICAgcmV0dXJuIENtZFJlc3VsdChwLnJldHVybmNvZGUscC5zdGRvdXQscC5zdGRlcnIpCgpkZWYgZW5zdXJlX3Rvb2xzKCk6CiAgICBmb3IgdCBpbiBbImdpdCIsImdoIl06CiAgICAgICAgaWYgcnVuKFt0LCItLXZlcnNpb24iXSkuY29kZSE9MDoKICAgICAgICAgICAgc3lzLmV4aXQoZiJFUlJPUjoge3R9IG5vdCBmb3VuZC4iKQoKZGVmIHJlcG9fc2x1ZygpLT5zdHI6CiAgICBpZiAiLyIgaW4gUkVQTzoKICAgICAgICBzeXMuZXhpdCgiRVJST1I6IFJFUE8gbXVzdCBiZSBuYW1lLW9ubHksIG5vdCBvd25lci9uYW1lLiIpCiAgICByZXR1cm4gZiJ7T1dORVJ9L3tSRVBPfSIKCmRlZiBnaF9yZXBvX2V4aXN0cygpLT5ib29sOgogICAgcmV0dXJuIHJ1bihbImdoIiwicmVwbyIsInZpZXciLHJlcG9fc2x1ZygpXSkuY29kZT09MAoKZGVmIGNsb25lX3JlcG8oKToKICAgIFdPUktESVIucGFyZW50Lm1rZGlyKHBhcmVudHM9VHJ1ZSxleGlzdF9vaz1UcnVlKQogICAgaWYgV09SS0RJUi5leGlzdHMoKToKICAgICAgICBzaHV0aWwucm10cmVlKFdPUktESVIpCiAgICByPXJ1bihbImdoIiwicmVwbyIsImNsb25lIixyZXBvX3NsdWcoKSxzdHIoV09SS0RJUildKQogICAgaWYgci5jb2RlIT0wOgogICAgICAgIHN5cy5leGl0KGYiRVJST1I6IGNsb25lIGZhaWxlZFxue3IuZXJyIG9yIHIub3V0fSIpCgpkZWYgcHJlcGFyZV9icmFuY2goKS0+c3RyOgogICAgZm9yIGMgaW4gKFsiZ2l0IiwiZmV0Y2giLCItLWFsbCIsIi0tcHJ1bmUiXSwKICAgICAgICAgICAgICBbImdpdCIsImNoZWNrb3V0IixCQVNFX0JSQU5DSF0sCiAgICAgICAgICAgICAgWyJnaXQiLCJyZXNldCIsIi0taGFyZCIsZiJvcmlnaW4ve0JBU0VfQlJBTkNIfSJdKToKICAgICAgICByPXJ1bihjLGN3ZD1XT1JLRElSKQogICAgICAgIGlmIHIuY29kZSE9MDoKICAgICAgICAgICAgc3lzLmV4aXQoZiJFUlJPUjogeycgJy5qb2luKGMpfVxue3IuZXJyIG9yIHIub3V0fSIpCiAgICBpbXBvcnQgcmUKICAgIHNsdWc9cmUuc3ViKHIiW15hLXowLTldKyIsIi0iLFBSX1RJVExFLmxvd2VyKCkpLnN0cmlwKCItIikgb3IgImNoYW5nZXMiCiAgICBicmFuY2g9KEJSQU5DSF9OQU1FLnN0cmlwKCkgb3IgZiJhaS97c2x1Z1s6NDBdfS17VElNRVNUQU1QfSIpCiAgICBpZiBydW4oWyJnaXQiLCJzd2l0Y2giLCItYyIsYnJhbmNoXSxjd2Q9V09SS0RJUikuY29kZSE9MDoKICAgICAgICBzeXMuZXhpdChmIkVSUk9SOiBzd2l0Y2gge2JyYW5jaH0iKQogICAgcmV0dXJuIGJyYW5jaAoKZGVmIGVuc3VyZV9sYWJlbHMoKToKICAgIHI9cnVuKFsiZ2giLCJsYWJlbCIsImxpc3QiLCItLWpzb24iLCJuYW1lIl0sY3dkPVdPUktESVIpCiAgICBleGlzdGluZz1zZXQoKQogICAgaWYgci5jb2RlPT0wIGFuZCByLm91dC5zdHJpcCgpOgogICAgICAgIHRyeToKICAgICAgICAgICAgZXhpc3Rpbmc9e3hbIm5hbWUiXSBmb3IgeCBpbiBqc29uLmxvYWRzKHIub3V0KX0KICAgICAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgICAgICBleGlzdGluZz17bG4uc3BsaXQoKVswXSBmb3IgbG4gaW4gci5vdXQuc3BsaXRsaW5lcygpIGlmIGxuLnN0cmlwKCl9CiAgICBmb3IgbmFtZSBpbiBQUl9MQUJFTFM6CiAgICAgICAgaWYgbmFtZSBpbiBleGlzdGluZzoKICAgICAgICAgICAgY29udGludWUKICAgICAgICBjb2xvcj1MQUJFTF9DT0xPUlMuZ2V0KG5hbWUsImJmZGFkYyIpCiAgICAgICAgcnI9cnVuKFsiZ2giLCJsYWJlbCIsImNyZWF0ZSIsbmFtZSwiLS1jb2xvciIsY29sb3IsIi0tZGVzY3JpcHRpb24iLGYiQXV0by1jcmVhdGVkIGxhYmVsIC0ge25hbWV9Il0sY3dkPVdPUktESVIpCiAgICAgICAgaWYgcnIuY29kZSE9MDoKICAgICAgICAgICAgcHJpbnQoZiJXQVJOSU5HOiBsYWJlbCBjcmVhdGUgJ3tuYW1lfSc6XG57cnIuZXJyIG9yIHJyLm91dH0iLGZpbGU9c3lzLnN0ZGVycikKCmRlZiBub3JtYWxpemVkX2RpZmZfYnl0ZXMoKS0+Ynl0ZXM6CiAgICBpZiBESUZGX0I2NC5zdHJpcCgpOgogICAgICAgIGQ9YmFzZTY0LmI2NGRlY29kZShESUZGX0I2NCkKICAgICAgICBpZiBESUZGX1NIQTI1NiBhbmQgaGFzaGxpYi5zaGEyNTYoZCkuaGV4ZGlnZXN0KCkubG93ZXIoKSE9RElGRl9TSEEyNTYubG93ZXIoKToKICAgICAgICAgICAgc3lzLmV4aXQoIkVSUk9SOiBESUZGX1NIQTI1NiBtaXNtYXRjaCIpCiAgICAgICAgcmV0dXJuIGQucmVwbGFjZShiIlxyXG4iLGIiXG4iKQogICAgZWxpZiBESUZGX0NPTlRFTlQuc3RyaXAoKToKICAgICAgICByZXR1cm4gRElGRl9DT05URU5ULnJlcGxhY2UoIlxyXG4iLCJcbiIpLmVuY29kZSgidXRmLTgiKQogICAgcmV0dXJuIGIiIgoKZGVmIGFwcGx5X2RpZmZfYW5kX2Jsb2JzKCk6CiAgICBkPW5vcm1hbGl6ZWRfZGlmZl9ieXRlcygpCiAgICBpZiBkOgogICAgICAgIGRmPVdPUktESVIvImNoYW5nZXMuZGlmZiIKICAgICAgICBkZi53cml0ZV9ieXRlcyhkKQogICAgICAgIGlmIHJ1bihbImdpdCIsImFwcGx5IiwiLS1pbmRleCIsIi0td2hpdGVzcGFjZT1maXgiLHN0cihkZildLGN3ZD1XT1JLRElSKS5jb2RlIT0wOgogICAgICAgICAgICBpZiBydW4oWyJwYXRjaCIsIi1wMSIsIi1OIiwiLXIiLCJyZWplY3Rpb25zLmxvZyIsIi1pIixzdHIoZGYpXSxjd2Q9V09SS0RJUikuY29kZSE9MDoKICAgICAgICAgICAgICAgIHN5cy5leGl0KCJFUlJPUjogY2Fubm90IGFwcGx5IGRpZmYiKQogICAgZWxpZiBub3QgRklMRV9CTE9CUzoKICAgICAgICBzeXMuZXhpdCgiRVJST1I6IG5vIGNoYW5nZXMgdG8gYXBwbHkiKQogICAgZm9yIHBhdGgsYjY0IGluIEZJTEVfQkxPQlMuaXRlbXMoKToKICAgICAgICBwPShXT1JLRElSL3BhdGgpCiAgICAgICAgcC5wYXJlbnQubWtkaXIocGFyZW50cz1UcnVlLGV4aXN0X29rPVRydWUpCiAgICAgICAgcC53cml0ZV9ieXRlcyhiYXNlNjQuYjY0ZGVjb2RlKGI2NCkpCiAgICAgICAgaWYgcnVuKFsiZ2l0IiwiYWRkIixwYXRoXSxjd2Q9V09SS0RJUikuY29kZSE9MDoKICAgICAgICAgICAgc3lzLmV4aXQoZiJFUlJPUjogZ2l0IGFkZCB7cGF0aH0iKQoKZGVmIGNvbW1pdF9hbmRfcHVzaChicmFuY2g6c3RyKToKICAgIHJ1bihbImdpdCIsImFkZCIsIi1BIl0sY3dkPVdPUktESVIpCiAgICBpZiBydW4oWyJnaXQiLCJzdGF0dXMiLCItLXBvcmNlbGFpbiJdLGN3ZD1XT1JLRElSKS5vdXQuc3RyaXAoKT09IiI6CiAgICAgICAgc3lzLmV4aXQoIkVSUk9SOiBubyBzdGFnZWQgY2hhbmdlcyIpCiAgICBpZiBydW4oWyJnaXQiLCJjb21taXQiLCItbSIsUFJfVElUTEVdLGN3ZD1XT1JLRElSKS5jb2RlIT0wOgogICAgICAgIHN5cy5leGl0KCJFUlJPUjogY29tbWl0IGZhaWxlZCIpCiAgICBpZiBydW4oWyJnaXQiLCJwdXNoIiwiLXUiLCJvcmlnaW4iLGJyYW5jaF0sY3dkPVdPUktESVIpLmNvZGUhPTA6CiAgICAgICAgc3lzLmV4aXQoIkVSUk9SOiBwdXNoIGZhaWxlZCIpCgpkZWYgY3JlYXRlX3ByKGJyYW5jaDpzdHIpOgogICAgYXJncz1bImdoIiwicHIiLCJjcmVhdGUiLCItLWJhc2UiLEJBU0VfQlJBTkNILCItLWhlYWQiLGJyYW5jaCwiLS10aXRsZSIsUFJfVElUTEUsIi0tYm9keSIsUFJfQk9EWV0KICAgIGZvciBsYWIgaW4gUFJfTEFCRUxTOgogICAgICAgIGFyZ3MrPVsiLS1sYWJlbCIsbGFiXQogICAgaWYgUFJfUkVWSUVXRVJTOgogICAgICAgIGFyZ3MrPVsiLS1yZXZpZXdlciIsIiwiLmpvaW4oUFJfUkVWSUVXRVJTKV0KICAgIHI9cnVuKGFyZ3MsY3dkPVdPUktESVIpCiAgICBpZiByLmNvZGUhPTA6CiAgICAgICAgc3lzLmV4aXQoZiJFUlJPUjogZ2ggcHIgY3JlYXRlXG57ci5lcnIgb3Igci5vdXR9IikKICAgIHByaW50KHIub3V0LnN0cmlwKCkpCgpkZWYgbWFpbigpOgogICAgZW5zdXJlX3Rvb2xzKCkKICAgIFNDUkFUQ0hfRElSLm1rZGlyKHBhcmVudHM9VHJ1ZSxleGlzdF9vaz1UcnVlKQogICAgaWYgbm90IGdoX3JlcG9fZXhpc3RzKCk6CiAgICAgICAgc3lzLmV4aXQoZiJFUlJPUjogcmVwbyAne3JlcG9fc2x1ZygpfScgbm90IGFjY2Vzc2libGUiKQogICAgY2xvbmVfcmVwbygpCiAgICBicmFuY2g9cHJlcGFyZV9icmFuY2goKQogICAgZW5zdXJlX2xhYmVscygpCiAgICBhcHBseV9kaWZmX2FuZF9ibG9icygpCiAgICBjb21taXRfYW5kX3B1c2goYnJhbmNoKQogICAgY3JlYXRlX3ByKGJyYW5jaCkKICAgIHByaW50KGYiU1VDQ0VTUzogT3BlbmVkIFBSIGZyb20gJ3ticmFuY2h9JyBpbnRvICd7QkFTRV9CUkFOQ0h9JyBmb3Ige3JlcG9fc2x1ZygpfSIpCgppZiBfX25hbWVfXz09Il9fbWFpbl9fIjoKICAgIG1haW4oKQo=", "tools/repo_bootstrap_TEMPLATE.py": "IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwpmcm9tIF9fZnV0dXJlX18gaW1wb3J0IGFubm90YXRpb25zCmltcG9ydCBzeXMsIG9zLCBzaHV0aWwsIHN1YnByb2Nlc3MsIGpzb24KZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUKZnJvbSBwYXRobGliIGltcG9ydCBQYXRoCgpPV05FUiA9ICJwdmxpZXNkb25rIgpSRVBPICA9ICI8UkVQT19OQU1FX0hFUkU+IgpWSVNJQklMSVRZID0gInB1YmxpYyIgICAgICAgICAgIyBvciAicHJpdmF0ZSIKTElDRU5TRV9DSE9JQ0UgPSAiTUlUIiAgICAgICAgICMgIk1JVCIgfCAiQXBhY2hlLTIuMCIgfCAiVW5saWNlbnNlIiB8ICJOb25lIgpBVVRIT1IgPSAiUGV0ZXIgdmFuIExpZXNkb25rIgpZRUFSID0gZGF0ZXRpbWUudXRjbm93KCkuc3RyZnRpbWUoIiVZIikKCkRFVl9CUkFOQ0ggPSBvcy5lbnZpcm9uLmdldCgiQkFTRV9CUkFOQ0giLCAiZGV2ZWxvcCIpICAjIGFsbG93ICdkZXZlbG9wbWVudCcgdmlhIGVudiBvdmVycmlkZQoKTEFCRUxTID0gewogICAgImZyb20tYWkiOiAoIjUzMTllNyIsIkF1dG8tY3JlYXRlZCBsYWJlbCAtIGZyb20gQUkiKSwKICAgICJuZWVkcy1yZXZpZXciOiAoImQ5M2YwYiIsIkF1dG8tY3JlYXRlZCBsYWJlbCAtIG5lZWRzIHJldmlldyIpLAogICAgImJsb2NrZWQiOiAoImI2MDIwNSIsIkF1dG8tY3JlYXRlZCBsYWJlbCAtIGJsb2NrZWQiKSwKICAgICJzZWN1cml0eSI6ICgiMDAwMDAwIiwiQXV0by1jcmVhdGVkIGxhYmVsIC0gc2VjdXJpdHkiKSwKICAgICJicmVha2luZy1jaGFuZ2UiOiAoImUxMWQyMSIsIkF1dG8tY3JlYXRlZCBsYWJlbCAtIGJyZWFraW5nIGNoYW5nZSIpLAogICAgImRvY3MiOiAoIjBlOGExNiIsIkF1dG8tY3JlYXRlZCBsYWJlbCAtIGRvY3VtZW50YXRpb24iKSwKICAgICJjaG9yZSI6ICgiYzVkZWY1IiwiQXV0by1jcmVhdGVkIGxhYmVsIC0gY2hvcmUiKSwKICAgICJjb250ZW50IjogKCIxZDc2ZGIiLCJBdXRvLWNyZWF0ZWQgbGFiZWwgLSBjb250ZW50IiksCiAgICAiZGVzaWduIjogKCJmYmNhMDQiLCJBdXRvLWNyZWF0ZWQgbGFiZWwgLSBkZXNpZ24iKSwKICAgICJhc3NldCI6ICgiYmZkYWRjIiwiQXV0by1jcmVhdGVkIGxhYmVsIC0gYXNzZXQiKSwKfQoKU0NSQVRDSCA9IFBhdGgoIi9tbnQvc2NyYXRjaCIpClRTID0gZGF0ZXRpbWUudXRjbm93KCkuc3RyZnRpbWUoIiVZJW0lZF8lSCVNJVMiKQpXT1JLRElSID0gU0NSQVRDSCAvIGYicmVwb19ib290c3RyYXBfe09XTkVSfV97UkVQT31fe1RTfSIKCmRlZiBydW4oY21kLCBjd2Q9Tm9uZSwgY2hlY2s9VHJ1ZSk6CiAgICBwID0gc3VicHJvY2Vzcy5ydW4oY21kLCBjd2Q9c3RyKGN3ZCkgaWYgY3dkIGVsc2UgTm9uZSwgdGV4dD1UcnVlLCBzdGRvdXQ9c3VicHJvY2Vzcy5QSVBFLCBzdGRlcnI9c3VicHJvY2Vzcy5QSVBFKQogICAgaWYgY2hlY2sgYW5kIHAucmV0dXJuY29kZSAhPSAwOgogICAgICAgIHJhaXNlIFN5c3RlbUV4aXQoZiJFUlJPUjoge2NtZH1cblNURE9VVDpcbntwLnN0ZG91dH1cblNUREVSUjpcbntwLnN0ZGVycn0iKQogICAgcmV0dXJuIHAKCmRlZiB3cml0ZV9pZl9taXNzaW5nKHBhdGg6IFBhdGgsIGNvbnRlbnQ6IHN0cik6CiAgICBpZiBub3QgcGF0aC5leGlzdHMoKToKICAgICAgICBwYXRoLnBhcmVudC5ta2RpcihwYXJlbnRzPVRydWUsIGV4aXN0X29rPVRydWUpCiAgICAgICAgcGF0aC53cml0ZV90ZXh0KGNvbnRlbnQsIGVuY29kaW5nPSJ1dGYtOCIpCgpkZWYgbWl0X3RleHQoeWVhcjogc3RyLCBhdXRob3I6IHN0cikgLT4gc3RyOgogICAgcmV0dXJuIGYiIiJNSVQgTGljZW5zZQoKQ29weXJpZ2h0IChjKSB7eWVhcn0ge2F1dGhvcn0KClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkKb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwKaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cwp0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsCmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcwpmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsCmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUgpJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwKRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFCkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIKTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwKT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUKU09GVFdBUkUuCiIiIgoKQVBBQ0hFMl9TTklQUEVUID0gIkFwYWNoZSBMaWNlbnNlIDIuMCAtIHNlZSBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAiClVOTElDRU5TRSA9ICJVbmxpY2Vuc2UgLSBzZWUgaHR0cHM6Ly91bmxpY2Vuc2Uub3JnLyIKCmRlZiBtYWluKCk6CiAgICBmb3IgdCBpbiAoImdpdCIsImdoIik6CiAgICAgICAgaWYgcnVuKFt0LCItLXZlcnNpb24iXSxjaGVjaz1GYWxzZSkucmV0dXJuY29kZSE9MDogcmFpc2UgU3lzdGVtRXhpdChmIkVSUk9SOiB7dH0gbm90IGZvdW5kLiIpCiAgICBTQ1JBVENILm1rZGlyKHBhcmVudHM9VHJ1ZSwgZXhpc3Rfb2s9VHJ1ZSkKICAgIGlmIFdPUktESVIuZXhpc3RzKCk6IHNodXRpbC5ybXRyZWUoV09SS0RJUikKICAgIFdPUktESVIubWtkaXIoKQoKICAgIHNsdWc9ZiJ7T1dORVJ9L3tSRVBPfSIKICAgIGlmIHJ1bihbImdoIiwicmVwbyIsInZpZXciLHNsdWddLGNoZWNrPUZhbHNlKS5yZXR1cm5jb2RlPT0wOgogICAgICAgIHJ1bihbImdoIiwicmVwbyIsImNsb25lIixzbHVnLHN0cihXT1JLRElSKV0pCiAgICAgICAgY3dkPVdPUktESVIKICAgICAgICBydW4oWyJnaXQiLCJjaGVja291dCIsIm1haW4iXSxjd2Q9Y3dkLGNoZWNrPUZhbHNlKQogICAgZWxzZToKICAgICAgICBjd2Q9V09SS0RJUgogICAgICAgIHJ1bihbImdpdCIsImluaXQiLCItYiIsIm1haW4iXSxjd2Q9Y3dkKQogICAgICAgIGlmIExJQ0VOU0VfQ0hPSUNFPT0iTUlUIjogd3JpdGVfaWZfbWlzc2luZyhjd2QvIkxJQ0VOU0UiLCBtaXRfdGV4dChZRUFSLCBBVVRIT1IpKQogICAgICAgIGVsaWYgTElDRU5TRV9DSE9JQ0U9PSJBcGFjaGUtMi4wIjogd3JpdGVfaWZfbWlzc2luZyhjd2QvIkxJQ0VOU0UiLCBBUEFDSEUyX1NOSVBQRVQpCiAgICAgICAgZWxpZiBMSUNFTlNFX0NIT0lDRT09IlVubGljZW5zZSI6IHdyaXRlX2lmX21pc3NpbmcoY3dkLyJMSUNFTlNFIiwgVU5MSUNFTlNFKQogICAgICAgIHdyaXRlX2lmX21pc3NpbmcoY3dkLyJSRUFETUUubWQiLCBmIiMge1JFUE99XG4iKQogICAgICAgIHdyaXRlX2lmX21pc3NpbmcoY3dkLyJDT05UUklCVVRJTkcubWQiLCAiIyBDb250cmlidXRpbmdcblxuRm9sbG93IEVOR0lORUVSSU5HX0NPTlRSQUNULm1kIHdvcmtmbG93LlxuIikKICAgICAgICB3cml0ZV9pZl9taXNzaW5nKGN3ZC8iLmdpdGlnbm9yZSIsIi5EU19TdG9yZVxuLmVudlxuIikKICAgICAgICBydW4oWyJnaXQiLCJhZGQiLCItQSJdLGN3ZD1jd2QpOyBydW4oWyJnaXQiLCJjb21taXQiLCItbSIsZiJjaG9yZTogYm9vdHN0cmFwIHJlcG9zaXRvcnkgKGxpY2Vuc2U6IHtMSUNFTlNFX0NIT0lDRX0pIl0sY3dkPWN3ZCkKICAgICAgICB2aXNfZmxhZz0iLS1wdWJsaWMiIGlmIFZJU0lCSUxJVFk9PSJwdWJsaWMiIGVsc2UgIi0tcHJpdmF0ZSIKICAgICAgICBydW4oWyJnaCIsInJlcG8iLCJjcmVhdGUiLHNsdWcsdmlzX2ZsYWcsIi0tc291cmNlIixzdHIoY3dkKSwiLS1yZW1vdGUiLCJvcmlnaW4iLCItLXB1c2giXSxjd2Q9Y3dkKQoKICAgIHJ1bihbImdpdCIsImNoZWNrb3V0IiwibWFpbiJdLGN3ZD1jd2QsY2hlY2s9RmFsc2UpCiAgICBydW4oWyJnaXQiLCJjaGVja291dCIsIi1CIixERVZfQlJBTkNIXSxjd2Q9Y3dkKQogICAgcnVuKFsiZ2l0IiwicHVzaCIsIi11Iiwib3JpZ2luIixERVZfQlJBTkNIXSxjd2Q9Y3dkKQoKICAgIHA9cnVuKFsiZ2giLCJsYWJlbCIsImxpc3QiLCItLWpzb24iLCJuYW1lIl0sY3dkPWN3ZCxjaGVjaz1GYWxzZSkKICAgIGV4aXN0aW5nPXNldCgpCiAgICBpZiBwLnJldHVybmNvZGU9PTAgYW5kIHAuc3Rkb3V0LnN0cmlwKCk6CiAgICAgICAgdHJ5OiBleGlzdGluZz17aXRbIm5hbWUiXSBmb3IgaXQgaW4ganNvbi5sb2FkcyhwLnN0ZG91dCkgaWYgIm5hbWUiIGluIGl0fQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb246IGV4aXN0aW5nPXtsbi5zcGxpdCgpWzBdIGZvciBsbiBpbiBwLnN0ZG91dC5zcGxpdGxpbmVzKCkgaWYgbG4uc3RyaXAoKX0KICAgIGZvciBuYW1lLChjb2xvcixkZXNjKSBpbiBMQUJFTFMuaXRlbXMoKToKICAgICAgICBpZiBuYW1lIGluIGV4aXN0aW5nOiBjb250aW51ZQogICAgICAgIHJ1bihbImdoIiwibGFiZWwiLCJjcmVhdGUiLG5hbWUsIi0tY29sb3IiLGNvbG9yLCItLWRlc2NyaXB0aW9uIixkZXNjXSxjd2Q9Y3dkLGNoZWNrPUZhbHNlKQoKICAgIHByaW50KGYiU1VDQ0VTUzogUmVwb3NpdG9yeSBpbml0aWFsaXplZCBhdCB7c2x1Z30uIERldmVsb3BtZW50IGJyYW5jaDoge0RFVl9CUkFOQ0h9IikKICAgIHByaW50KGYiTG9jYWwgd29ya2luZyBjb3B5OiB7Y3dkfSIpCgppZiBfX25hbWVfXz09Il9fbWFpbl9fIjogbWFpbigpCg=="}')

def run(cmd, cwd=None, check=True):
    p = subprocess.run(cmd, cwd=str(cwd) if cwd else None, text=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if check and p.returncode != 0:
        raise SystemExit(f"ERROR: {cmd}\nSTDOUT:\n{p.stdout}\nSTDERR:\n{p.stderr}")
    return p

def ensure_tools():
    for t in ("git","gh"):
        if run([t,"--version"],check=False).returncode!=0:
            raise SystemExit(f"ERROR: {t} not found.")

def repo_slug():
    if "/" in REPO: raise SystemExit("REPO must be name-only.")
    return f"{OWNER}/{REPO}"

def clone_repo():
    WORKDIR.parent.mkdir(parents=True, exist_ok=True)
    if WORKDIR.exists(): shutil.rmtree(WORKDIR)
    run(["gh","repo","clone",repo_slug(),str(WORKDIR)])

def prepare_branch():
    run(["git","fetch","--all","--prune"], cwd=WORKDIR)
    run(["git","checkout",BASE_BRANCH], cwd=WORKDIR)
    run(["git","reset","--hard",f"origin/{BASE_BRANCH}"], cwd=WORKDIR)
    branch=f"chore/sync-contract-tools-v1.5.0-{TIMESTAMP}"
    run(["git","switch","-c",branch], cwd=WORKDIR)
    return branch

def ensure_labels():
    res = run(["gh","label","list","--json","name"], cwd=WORKDIR, check=False)
    existing=set()
    if res.returncode==0 and res.stdout.strip():
        try:
            data=json.loads(res.stdout)
            existing={x["name"] for x in data if "name" in x}
        except Exception:
            existing={ln.split()[0] for ln in res.stdout.splitlines() if ln.strip()}
    for name,color in LABEL_COLORS.items():
        if name in existing: continue
        run(["gh","label","create",name,"--color",color,"--description",f"Auto-created label - {name}"], cwd=WORKDIR, check=False)

def write_payloads():
    for rel, b64 in PAYLOADS_B64.items():
        p = WORKDIR / rel
        p.parent.mkdir(parents=True, exist_ok=True)
        p.write_bytes(base64.b64decode(b64.encode("ascii")))

def commit_push(branch):
    run(["git","add","-A"], cwd=WORKDIR)
    if run(["git","status","--porcelain"], cwd=WORKDIR).stdout.strip()=="":
        raise SystemExit("No changes to commit; repository already up-to-date.")
    run(["git","commit","-m",PR_TITLE], cwd=WORKDIR)
    run(["git","push","-u","origin",branch], cwd=WORKDIR)

def open_pr(branch):
    args=["gh","pr","create","--base",BASE_BRANCH,"--head",branch,"--title",PR_TITLE,"--body",PR_BODY]
    for lab in PR_LABELS: args+=["--label",lab]
    r=run(args, cwd=WORKDIR)
    print(r.stdout.strip())

def main():
    ensure_tools()
    clone_repo()
    branch=prepare_branch()
    ensure_labels()
    write_payloads()
    commit_push(branch)
    open_pr(branch)
    print(f"SUCCESS: Opened sync PR into '{BASE_BRANCH}' for {repo_slug()}")

if __name__=="__main__":
    main()
